<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jpsxno1</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-07T12:28:27.553Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jpsxno1</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Resources Folder</title>
    <link href="http://yoursite.com/2017/06/07/The-Resources-Folder/"/>
    <id>http://yoursite.com/2017/06/07/The-Resources-Folder/</id>
    <published>2017-06-07T09:48:23.000Z</published>
    <updated>2017-06-07T12:28:27.553Z</updated>
    
    <content type="html"><![CDATA[<p>   ������������Resourcesϵͳ����ϵͳ���������߽���Դ�洢��һ������������ΪResources���ļ����У���������ʱ��Resources API���ػ�ж����Щ��Դ��</p>
<h1 id="Best-Practices-for-the-Resources-System"><a href="#Best-Practices-for-the-Resources-System" class="headerlink" title="Best Practices for the Resources System"></a>Best Practices for the Resources System</h1><pre><code>��Ҫ������
����ǿ�����Ľ�����Դ��һ�¼���ԭ����
</code></pre><ol>
<li>Resources�ļ��е�ʹ��ʹ��ϸ�����ڴ��Ĺ����������ѡ�</li>
<li>Resources�ļ��еĲ��ʵ���ʹ�ý�����Ӧ�ó�������ʱ�������ɵĴ�С��<br> -����Resources�ļ���������������Resources�ļ�������Դ�Ĺ��������÷ǳ����ѡ�</li>
<li>Resourcesϵͳ��������Ŀ���ض�ƽ̨�ṩ�Զ������ݵ����� �����������������������Ŀ����ԡ�<br> -AssetBundle��UnityΪ��ÿ���豸�Ļ����ϵ������ݵ���Ҫ���ߡ�</li>
</ol>
<h1 id="Resourcesϵͳ�l���ʹ��"><a href="#Resourcesϵͳ�l���ʹ��" class="headerlink" title="Resourcesϵͳ�ĺ���ʹ��"></a>Resourcesϵͳ�ĺ���ʹ��</h1><p>   ���������������İ������ڰ����У�Resourcesϵͳ�����õģ����Ҳ��������õĿ���ʵ����</p>
<ol>
<li>��ΪResources�������ã������ڿ�������ԭ�ͺ�ʵ��ʱ����һ���ܺõ�ϵͳ�� Ȼ��������Ŀ���뵽��ȫ�����׶Σ�ǿ�ҽ���ȡ������Resources�ļ��е�ʹ�á�</li>
<li>�����������£�Resources�ļ���Ҳ�����ã�<br> �洢��Resources�ļ����е����ݲ����ڴ��ܼ��͵�<br> ����Ŀ���������������ڣ�����һ���Ǳ�����<br> ���ݺ�����Ҫ�޲�<br> ���ݲ���ƽ̨���豸������<br> �ڶ������������Ӱ�������һ�����������ű���ȫ��ʹ�õ�Ԥ�裬�Ͱ����˵������������ݵ��ļ�����Դ����������AppID��</li>
</ol>
<h1 id="Serialization-of-Resources"><a href="#Serialization-of-Resources" class="headerlink" title="Serialization of Resources"></a>Serialization of Resources</h1><p>   ����Ŀ����ʱ�� ��������ΪResources���ļ����е���Դ�Ͷ������ϳ�һ���������л��ļ��������ļ�Ҳ������Ԫ���ݺ�������Ϣ��������һ��AssetBundle����������Ϣ������һ�����л����������˲������������������Ķ����ֽ��ɺ��ʵ�GUID��FileID����Ҳ��������λ���������л��ļ������е��ֽ�ƫ�ơ�<br>   �����ڴ�����ƽ̨�ϲ������ݽṹ��һ��ƽ�����������佨����ʱ�临�Ӷ���O(NLogN), NΪ���������Ķ���������������������Resources�ļ����ж���������������<br>   ���������ǲ��ɱ����ģ���������Ӧ�ó�������ʱ�ķǽ���ʽ���������档��ʼ��һ��������10000����Դ��Resourcesϵͳ�ڵͶ˻��Ͻ��������룬����Resources�ļ����д������Ķ������ټ��ص�Ӧ�ó����ĳ�ʼ���档</p>
]]></content>
    
    <summary type="html">
    
      The Resources folder of Unity
    
    </summary>
    
      <category term="Unity����" scheme="http://yoursite.com/categories/Unity%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD/"/>
    
    
      <category term="Unity Asset, Resources and AssetBundles" scheme="http://yoursite.com/tags/Unity-Asset-Resources-and-AssetBundles/"/>
    
  </entry>
  
  <entry>
    <title>Unity资源，对象和序列化</title>
    <link href="http://yoursite.com/2017/06/07/Unity%E8%B5%84%E6%BA%90%EF%BC%8C%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2017/06/07/Unity资源，对象和序列化/</id>
    <published>2017-06-07T06:13:05.000Z</published>
    <updated>2017-06-07T11:49:04.120Z</updated>
    
    <content type="html"><![CDATA[<p>本文将从Unity编辑器和运行时两个角度出发，主要探讨以下两方面内容：Unity序列化系统内部细节以及Unity如何维护不同对象之间的强引用。另外还会讨论对象与资源的技术实现差别。</p>
<p>译注：除非特别说明，下文中所有的“资源”均指代“Asset”。</p>
<p>本文内容是理解在Unity中如何高效加载和卸载资源的基础。正确的资源管理对缩短加载时间并减少内存占用来说至关重要。</p>
<h1 id="深入理解资源和对象"><a href="#深入理解资源和对象" class="headerlink" title="深入理解资源和对象"></a>深入理解资源和对象</h1><p>在理解Unity如何确保万无一失地管理数据之前，首先要知道Unity是如何识别并序列化数据的。首先第一点，要正确区分资源（Asset）和对象（UnityEngine.Objects）。</p>
<h2 id="Asset"><a href="#Asset" class="headerlink" title="Asset"></a>Asset</h2><p>资源（Asset）是硬盘中的文件，存储在Unity工程的Assets文件夹内。例如，纹理（Texture），材质（Material）和FBX文件等，它们都是资源。一些资源的数据格式是Unity原生支持的，例如材质。有些资源则需要转换为原生的数据格式后才能被Unity使用，例如FBX文件。</p>
<h2 id="UnityEngine-Object"><a href="#UnityEngine-Object" class="headerlink" title="UnityEngine.Object"></a>UnityEngine.Object</h2><p>UnityEngine.Object，或者说以大写字母O开头的Object——对象，代表序列化数据的集合，表示某个资源的具体实例。它可以是Unity引擎使用的任何类型的资源，例如网格，Sprite，音频剪辑或动画剪辑。所有的对象（Object）都是UnityEngine.Object基类的子类。</p>
<h2 id="特殊的Object类型"><a href="#特殊的Object类型" class="headerlink" title="特殊的Object类型"></a>特殊的Object类型</h2><p>几乎所有的对象（Object）类型都是内建的，其中有两种比较特殊的类型。</p>
<p>ScriptableObject为开发者提供了一套便捷的系统，供开发者自定义数据类型。这些类型可以被Unity直接序列化或反序列化，并在Unity编辑器的检视器窗口中进行操作。</p>
<p>MonoBehaviour提供了链接MonoScript的容器。MonoScript是一种内部数据类型，Unity用它保存对某个特定程序集和命名空间中特定脚本类的引用，MonoScript本身不包含任何实际的可执行代码。</p>
<h2 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h2><p>资源（Asset）与对象（Object）是一种一对多的关系，即一个资源文件可能会包括多个Object。</p>
<h1 id="对象之间的引用"><a href="#对象之间的引用" class="headerlink" title="对象之间的引用"></a>对象之间的引用</h1><p>所有UnityEngine.Objects都可以引用其他的UnityEngine.Objects。这里“其他的Object”可能存在于相同的资源文件中，或需要从其他资源文件导入。例如，一个材质Object通常有一个或多个纹理Object的引用。这些纹理Object一般是从一个或多个纹理资源文件中导入的（例如PNG或JPG文件）。</p>
<p>序列化后，这些引用由两部分数据组成：文件GUID和本地ID。文件GUID用于识别资源（Asset）文件中目标资源（Resource）的存储位置。而本地唯一(1)的ID负责识别单个资源文件中的Object，因为一个资源文件可能会包含多个Object。</p>
<h2 id="文件GUID-meta"><a href="#文件GUID-meta" class="headerlink" title="文件GUID(.meta)"></a>文件GUID(.meta)</h2><p>文件GUID存储于.meta文件中。Unity会在首次导入资源文件时生成.meta文件，并和资源文件一起存储在相同的目录中。</p>
<p>上述的识别和引用系统可以使用文本编辑器查看：</p>
<p>1.创建一个全新的Unity工程，更改编辑器设置，将Edit - Project Settings - Editor中的Version Control设为Visible Meta Files，并将Asset Serialization设为文本。<br>2.新建材质并向工程中导入一个纹理。将材质赋给场景中的一个立方体，保存场景。</p>
<p>使用文本编辑器打开这个材质对应的.meta文件。在文件顶端附近会有一行被标示为“guid”，该行定义了材质资源文件的文件GUID。</p>
<p>fileFormatVersion: 2<br>guid: 6839b719d14310c4f945de352bac3767<br>timeCreated: 1472566765<br>licenseType: Pro<br>NativeFormatImporter:<br>  userData:<br>  assetBundleName:<br>  assetBundleVariant: </p>
<h2 id="本地ID-具体文件"><a href="#本地ID-具体文件" class="headerlink" title="本地ID(具体文件)"></a>本地ID(具体文件)</h2><p>如需查看本地ID，使用文本编辑器打开材质文件，材质Object的定义大致如下：</p>
<p>%YAML 1.1<br>%TAG !u! tag:unity3d.com,2011:<br>— !u!21 &amp;2100000<br>Material:<br>serializedVersion: 6<br>… more data …</p>
<p>在上面的例子中，前面有&amp;符号的数字就是材质的本地ID。如果这个材质的Object位于一个文件GUID为“abcdefg”的资源文件中，则该材质Object的唯一识别符就是文件GUID“abcdefg”和本地ID“2100000”的组合。</p>
<h1 id="为什么要用文件GUID和本地ID？"><a href="#为什么要用文件GUID和本地ID？" class="headerlink" title="为什么要用文件GUID和本地ID？"></a>为什么要用文件GUID和本地ID？</h1><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>在Unity中，为什么要使用文件GUID和本地ID这套系统呢？答案是为稳定服务，也是为了提供一套灵活的、无关具体平台的工作流程。文件GUID提供了文件存储位置的抽象，这样一个文件GUID就对应一个具体的文件，这个具体的文件存储在什么位置也就无关紧要了。因此我们才能随意移动这个文件而不破坏所有相关Object对这个文件的引用。</p>
<p>任何资源（Asset）文件中都可能含有（或通过导入产生）多个UnityEngine.Object资源（Resource），因此需要一个本地ID来对其中的Object做明确区分。</p>
<p>如果与资源文件相关联的文件GUID丢失，则所有对该资源文件中的Object的引用都会被破坏。这就是必须保证.meta文件具有和资源文件相同的文件名并存储在同一目录下的原因。注意Unity会重新生成丢失或被删除的.meta文件。</p>
<h2 id="Unity编辑器维护映射表"><a href="#Unity编辑器维护映射表" class="headerlink" title="Unity编辑器维护映射表"></a>Unity编辑器维护映射表</h2><p>Unity编辑器负责维护一张文件路径与文件GUID之间关系的映射表。只要资源文件被读取或导入，这个映射关系就会被建立，映射会将资源的具体位置和资源的文件GUID进行关联。Unity编辑器处于打开状态时，假设一个文件的.meta意外丢失，并且该资源文件的路径没有改变，编辑器可以保证这个资源会被分配到相同的文件GUID。</p>
<p>如果在Unity编辑器处于关闭状态时丢失.meta文件，或资源文件被移动但没有移动对应的.meta文件时，所有对资源文件中的Object的引用都会丢失。</p>
<h1 id="复合资源和导入器"><a href="#复合资源和导入器" class="headerlink" title="复合资源和导入器"></a>复合资源和导入器</h1><h2 id="资源导入器"><a href="#资源导入器" class="headerlink" title="资源导入器"></a>资源导入器</h2><p>正如前面深入理解资源与对象中所说的一样，不能被Unity直接支持的资源类型必须经过导入才可以使用——使用资源导入器来完成。这些导入器是自动调用的，您也可以使用AssetImporter在脚本中调用API及其子类。例如，在导入单独的纹理资源例如PNG和JPG时，TextureImporter API提供了导入时要使用的相关设置的访问。</p>
<p>导入过程最终的产物是一系列UnityEngine.Object。在Unity编辑器中，这些对象会具体表现为父资源下的多个子资源，例如作为Sprite Atlas导入的纹理材质，其下属会有多个嵌套的Sprite。每一个对象都会使用相同的文件GUID，因为它们的源数据都存储在同一个资源文件中。它们在纹理资源中的具体区分工作则使用本地ID来完成。</p>
<h2 id="Library文件夹"><a href="#Library文件夹" class="headerlink" title="Library文件夹"></a>Library文件夹</h2><p>导入过程中会将源资源转换为匹配Unity编辑器中选定的目标平台的格式。导入过程可能会牵涉一些重量级操作，例如纹理压缩。如果每次打开Unity编辑器时都要执行这些操作，那效率就太低了。</p>
<p>为了解决这一问题，我们将资源导入的结果缓存在Library文件夹中。具体就是，导入进程的结果将会存储在以资源文件GUID头两位作为名称的文件夹中。这些文件夹位于 Library/metadata/ 目录下。各个不同的对象会被序列化后存储在一个二进制文件中，文件使用资源文件的GUID来命名。</p>
<p>这对所有资源都是一样的，不仅仅是非原生资源。只不过Unity原生支持的资源不需要对其进行转换或序列化处理。</p>
<h1 id="序列化和实例"><a href="#序列化和实例" class="headerlink" title="序列化和实例"></a>序列化和实例</h1><h2 id="InstanceID"><a href="#InstanceID" class="headerlink" title="InstanceID"></a>InstanceID</h2><p>尽管文件GUID和本地ID是稳健的，它们可以强有力地维护资源之间的关系，但还有一个问题，GUID效率比较低下，我们需要为运行时准备一个效率更高的解决方案。Unity在内部维护着一个缓存表(2)，负责将文件GUID和本地ID转换成为整数数值，这个数值在本次会话中是唯一的，称作InstanceID。InstanceID会简单地以单调递增的方式分配给缓存中新注册的对象。</p>
<p>缓存负责维护InstanceID与文件GUID和本地ID定义的对象源数据位置以及对象在内存中的地址（如果存在）的映射。 这样Unity就能够强而有力地保证它们互相之间的引用关系。通过解析InstanceID，我们能够快速找到并返回InstanceID对应的已载入实例。如果目标没有被加载，则Unity会通过文件GUID和本地ID解析获得对象的源数据，实时载入对象。</p>
<p>启动时，InstanceID缓存与所有工程内建的对象（例如在场景中被引用），以及Resources文件夹下的所有对象，都会一起被初始化。如果在运行时(3)导入了新的资源，或从AssetBundle中载入了新的对象，缓存会被更新并为这些对象添加相应条目。InstanceID仅在失效时才会被从缓存中移除，当提供了指定文件GUID和本地ID的AssetBundle被卸载时就会产生移除操作。</p>
<p>卸载AssetBundle会使InstanceID失效，InstanceID与其文件GUID和本地ID之间的映射会被删除以便节省内存。重新载入AssetBundle后，载入的每个对象都会获得一个新的InstanceID。</p>
<p>关于AssetBundle隐式卸载的更深层次讨论，参考AssetBundle Usage Patterns中的管理已加载资源章节。</p>
<h2 id="注意事项-IOS上挂起状态"><a href="#注意事项-IOS上挂起状态" class="headerlink" title="注意事项(IOS上挂起状态)"></a>注意事项(IOS上挂起状态)</h2><p>注意在某些平台上，有一些系统事件会使得对象在内存中被强行卸载。例如iOS平台上，当一个app处于挂起状态时，图形资源就会从显存中卸载。如果这些对象都来自于一个已被卸除的AssetBundle时，Unity将无法再次从源数据处加载这些对象。任何已有的对这些对象的引用都会失效。这个例子中，导致的后果就是出现网格不可见（丢失），或模型的纹理和材质呈现为洋红色（Shader丢失）。</p>
<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>提示：在运行时，对上述控制流程的描述并非完全准确。文件GUID和本地ID的比较操作在载入负担较重时的效率也会下降。构建Unity工程时，文件GUID和本地ID，确切地说会被映射到一种更简单的格式中。不过概念还是大致相同的，在考虑“运行时”的时候以文件GUID和本地ID的工作方式为思路还是有一些参考意义的。</p>
<p>这也是在运行时资源的文件GUID无法被调取的原因。</p>
<h1 id="MonoScripts"><a href="#MonoScripts" class="headerlink" title="MonoScripts"></a>MonoScripts</h1><p>理解MonoBehaviour很重要的一点是知道它有一个对MonoScript的引用。MonoScript的用途非常简单，里面包括了定位某个具体的编程类所需要的信息。这两种对象都没有程序类的可执行代码。</p>
<p>一个MonoScript含有三个字符串：程序库名称，类名称，命名空间。</p>
<h2 id="程序库-dll"><a href="#程序库-dll" class="headerlink" title="程序库(dll)"></a>程序库(dll)</h2><p>构建工程时，Unity会收集Assets文件夹中独立的脚本文件并将它们编译，组成一个Mono程序库。要特别说明的是，Unity会将Assets目录中的语言分开编译，Assets/Plugins目录中的脚本同理。Plugins子目录之外的C#脚本会放在Assembly-CSharp.dll中。而Plugins及其子目录中的脚本则放置在Assembly-CSharp-firstpass.dll中，以此类推。</p>
<p>这些程序库（加上预编译好的DLL程序库）将被包含在最终构建的Unity应用程序中。这些程序库都会被MonoScript所引用。与其他类型的资源不同，Unity应用程序中的所有应用程序都会在程序第一次启动时被加载。</p>
<p>MonoScript就是为什么AssetBundle（或一个场景，一个Prefab）中的MonoBehaviour组件不包含有任何实际可执行代码的原因。这样就可以让不同的MonoBehaviour引用某个共享类，即便这些MonoBehaviour不在同一个AssetBundle中。</p>
<h1 id="资源（Resource）生命周期"><a href="#资源（Resource）生命周期" class="headerlink" title="资源（Resource）生命周期"></a>资源（Resource）生命周期</h1><p>UnityEngine.Objects从内存中加载或卸载的时间点是定义好的。为了缩短程序载入时间，管理应用程序的内存足迹，理解UnityEinge.Object的资源生命周期是很重要的。</p>
<h2 id="加载UnityEngine-Object的两种方式"><a href="#加载UnityEngine-Object的两种方式" class="headerlink" title="加载UnityEngine.Object的两种方式"></a>加载UnityEngine.Object的两种方式</h2><p>有两种加载UnityEngine.Object的方式：自动加载或外部加载。</p>
<p>当对象的InstanceID与对象本身间接引用，对象当前未被加载到内存中，而且可以定位到对象的源数据，此时对象会被自动加载。对象也可以外部加载，通过在脚本中创建对象或调用资源加载API来载入对象（例如AssetBundle.LoadAsset）。</p>
<p>对象加载后，Unity会尝试修复任何可能存在的引用关系，通过将每个引用的文件GUID和本地ID转化成为InstanceID的方式。</p>
<p>一旦对象的实例ID被间接引用且满足以下两个标准时，对象会被强制加载：</p>
<p>1.InstanceID引用了一个没有被加载的对象。<br>2.InstanceID在缓存中存在对应的有效GUID和本地ID。</p>
<p>这种情况通常会在引用被加载并解析后很短的一段时间内发生。</p>
<p>如果文件GUID和本地ID没有InstanceID，或一个已卸载对象的InstanceID引用了非法的文件GUID和本地ID，则引用本身会被保留，但实际对象不会被加载。在Unity编辑器中表现为“（空）”引用。在运行的应用程序中，或场景视图里，“（空）”对象通常以多种方式表示，这取决于丢失对象的类型：网格会变得不可见，纹理呈现为洋红色等等。</p>
<h2 id="对象被卸载的三种情况"><a href="#对象被卸载的三种情况" class="headerlink" title="对象被卸载的三种情况"></a>对象被卸载的三种情况</h2><p>对象被卸载有以下三种情况：</p>
<p>1.闲置资源清理进程开始后，一些对象会被自动卸载。该过程通常会在切换场景并不保留原场景（例如调用了非叠加的场景切换API Application.LoadLevel），或者脚本中调用了Resources.UnloadUnusedAssets时自动触发。该进程仅卸载没有被引用的对象：Mono变量不存在对其的引用，且不存在引用该对象的其他活动对象。</p>
<p>2.Resources目录中的对象可以通过调用Resources.UnloadAsset API主动卸载。卸载后InstanceID会保持可用状态，对文件GUID和本地ID的条目会被保留且仍然有效。如果有Mono变量或其他有指向该对象的活动对象引用了被Resources.UnloadAsset卸载的对象，则该对象会在任意有效的引用被间接引用时立刻重新加载。</p>
<p>3.调用AssetBundle.Unload(true) API时，加载自AssetBundle的对象会被立刻自动卸载。该操作会释放对象InstanceID的文件GUID和本地ID引用，任何对卸载对象的引用都会变成“（空）”引用。C#脚本中，任何试图访问已卸载对象上的方法和属性都会导致抛出空引用异常（NullReferenceException）。</p>
<p>如果调用了AssetBundle.Unload(false)，被卸载的AssetBundle中仍然处于激活状态的对象不会被回收，但Unity会释放其实例ID的文件GUID和本地GUID引用。之后假如它们被从内存中卸载，只剩下对这些被卸载对象额引用，Unity无法再次重新加载这些对象(4)。</p>
<h1 id="载入大型结构树（Hierarchies）"><a href="#载入大型结构树（Hierarchies）" class="headerlink" title="载入大型结构树（Hierarchies）"></a>载入大型结构树（Hierarchies）</h1><p>当序列化含有大量Unity游戏对象的结构树时（例如序列化Prefab），要记住一点，即整个结构树都会被完全序列化。这就是说，<font color="#FF0000">结构树中的每一个游戏对象和组件都会在序列化数据中单独表示。</font>这会对游戏对象结构的载入与实例化的耗时带来有趣的影响。</p>
<p>当创建任一的游戏对象时，CPU的时间花在几种不同的方式上：</p>
<ol>
<li>读取源数据的时间（从存储的地方、从另一个游戏对象）</li>
<li>为新的Transform建立新的父子关系的时间</li>
<li>实例化新的游戏对象和组件的时间</li>
<li>唤醒新的游戏对象和组件的时间<br>后三种时间花费通常是不变的。读取源数据的时间随着结构树中组件和游戏对象的数量的增加呈线性增长，并与数据源的速度成正比。<br>在当前的所有平台上，从内存的其它地方读取数据远比从存储设备上加载数据要快的多。此外，也与存储介质的性能-读取数据的速度有<br>关。<br>因此，当从有低速存储器的平台上加载预设时，读取预设的序列化数据的时间远远超过了实例化预设的时间。也就是说，加载的时间花费主要是在存储的I/O上了。<font color="#FF0000">尽量从高速存储介质中读取数据，eg. 内存</font>

</li>
</ol>
<p>假设一个代码块实例化了一定数量的游戏对象，结构树非常庞大的单个Prefab的实例化，会比分别实例化结构树的多个模块然后运行时组合花费更多的CPU时间。</p>
<font color="#FF0000">正如之前提到的，序列化单独的Prefab时，每个游戏对象和其组件都会被分开序列化——即便数据是重复的。一个有30个独立元素的UI界面中，Unity会为这些元素序列化30次，这就会产生大量的序列化数据。在加载时，所有30个重复元素的游戏对象和组件在被转化为新实例对象之前都需要从硬盘中进行读取。就是这个文件读取时间决定了实例化大型Prefab的性能花销。<br>当Unity支持嵌套Prefab之后，对于有载入含有非常多的游戏对象的层次结构的工程而言，要想减少这类工程的载入时间，可以考虑将大型Prefab中的可重用元素分开存储到不同的Prefab中，并在运行时对它们进行实例化，而不是完全依靠Unity的序列化和Prefab系统。<br>此外，一旦一个预制体已经建成，那么克隆已经存在的预制体比重新从存储器中加载要快的多。<br><font color="#FF0000">将大型Prefab中的可重用元素单独存储到单个的Prefab中,对于可重用的元素运行时先实例化一次（只从低速存储介质中读取数据一次），若在组合成原大型Prefab时另需要，则复制已实例化的元素进行实例化（内存高速介质读取数据）</font>

<h2 id="Unity-5-4-Note"><a href="#Unity-5-4-Note" class="headerlink" title="Unity 5.4 Note:"></a>Unity 5.4 Note:</h2><pre><code>Unity5.4改变了Transform在内存中表示形式。每个根Transform的所有子Transform存储在内存的紧凑、连续的区域中。&lt;font color=&quot;#FF0000&quot;&gt;当实例化的游戏物体随后会加入到另一个层次结构中，考虑使用有父节点的参数新的GameObject.Instantiate的重载。&lt;/font&gt;
使用这个重载将避免新物体将在的根Transform的层次结构的重新分配。在测试中，这将会加快实例化操作所需时间的5% - 10%。
</code></pre><h1 id="Footnotes-脚注"><a href="#Footnotes-脚注" class="headerlink" title="Footnotes(脚注)"></a>Footnotes(脚注)</h1><p>1.在文件中，本地ID是唯一的。即在一个资源文件中，里面包含的本地ID都是不重复的。</p>
<p>2.在内部，这种缓存被称为PersistentManager。实际的转换工作在在Unity的C++ Remapper类中进行，Remapper类没有提供任何C# API调用接口。</p>
<p>3.运行时创建资源的示例是在脚本中创建Texture2D对象：var myTexture = new Texture2D(1027, 768);</p>
<p>4.程序运行时对象并没有被卸载却被从内存中移除的情况通常会发生在Unity失去了对图形内容的控制的时候。例如，当手机应用被挂起并被强制在后台运行。这种情况下，手机操作系统通常会将所有的图形资源从GPU显存中强行卸载。之后APP再回到前台运行时，Unity不得不重新向GPU上传需要的材质、着色器和网格数据，以便恢复场景的正常渲染。</p>
</font>]]></content>
    
    <summary type="html">
    
      Unity资源，对象和序列化
    
    </summary>
    
      <category term="Unity基础" scheme="http://yoursite.com/categories/Unity%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Unity Asset, Resources and AssetBundles" scheme="http://yoursite.com/tags/Unity-Asset-Resources-and-AssetBundles/"/>
    
  </entry>
  
  <entry>
    <title>unity元文件</title>
    <link href="http://yoursite.com/2017/06/07/unity%E5%85%83%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/06/07/unity元文件/</id>
    <published>2017-06-07T03:58:55.000Z</published>
    <updated>2017-06-07T08:52:05.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元文件-meta"><a href="#元文件-meta" class="headerlink" title="元文件 .meta"></a>元文件 .meta</h1><p>   每当导入一个资源到unity中时，unity都会创建一个唯一的Globally Unique Identifier（GUID），并存放在unity为每个资源创建的元文件中。<br>   使用GUID可以使你移动或重命名或修改资源而不改变资源间，资源场景间的依赖和引用关系（只要GUID不变）。但你必须维护与资源相关联的元文件，若元文件被删除，则unity认为元文件对应的资源已被删除。<br>    除了GUID之外，元文件还存储资源的导入信息。如：贴图资源可以作为一个标准的Texture、一个GUI贴图、一个Normalmap, 一个Cookie贴图、一个lightmap贴图、一个Sprite等。 这些导入设置也存储在元文件中。</p>
<pre><code>技巧：
只换资源但导入设置和依赖引用关系不变时，可以在资源管理器中值替换资源，.meta元文件不变。
</code></pre><h1 id="文件GUID-和本地FileID"><a href="#文件GUID-和本地FileID" class="headerlink" title="文件GUID 和本地FileID"></a>文件GUID 和本地FileID</h1><pre><code>Unity会为每个导入到Assets目录中的资源创建一个meta文件，文件中记录了GUID，GUID用来记录资源之间的引用关系。还有fileID（本地ID），用于标识资源内部的资源。资源间的依赖关系通过GUID来确定；资源内部的依赖关系使用fileID来确定。

获取某个资源的GUID的代码如下：
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var path = AssetDatabase.GetAssetPath(o);</div><div class="line">string strGUID = AssetDatabase.AssetPathToGUID(path);</div></pre></td></tr></table></figure>
<p>   技巧：<br>    可以通过查找资源的文本内容中的GUID来确定其引用的资源。</p>
]]></content>
    
    <summary type="html">
    
      Unity元文件.meta 、GUID 、 FileID
    
    </summary>
    
      <category term="Unity基础" scheme="http://yoursite.com/categories/Unity%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>unity资源基础</title>
    <link href="http://yoursite.com/2017/06/06/unity%E8%B5%84%E6%BA%90%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/06/06/unity资源基础/</id>
    <published>2017-06-06T09:58:14.000Z</published>
    <updated>2017-06-07T12:32:16.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unity工程目录结构"><a href="#Unity工程目录结构" class="headerlink" title="Unity工程目录结构"></a>Unity工程目录结构</h2><p>一般一个纯粹的Unity工程的目录结构由三个目录组成。</p>
<p>Assets: 工程中所有脚本和资源存放位置，此目录需要通过svn（或git等）进行管理；<br>ProjectSettings: 工程设置目录，例如哪些场景需要编译等，需要通过svn进行管理；<br>Library: 工程编译的中间文件，包括 Atlas, Shader, metadata等，Unity运行需要，不存在会自动生成，不需要通过svn进行管理。</p>
<h2 id="Assets目录内容"><a href="#Assets目录内容" class="headerlink" title="Assets目录内容"></a>Assets目录内容</h2><pre><code>Asset中的内容分为两部分：
脚本：脚本分为编辑器脚本，组件脚本，类脚本。 C#编写的脚本一般会生成四个工程。
资源：资源可以分为三类，Resources目录的资源， StreamingAssets目录的资源 和 其他资源。
 UnityEditor.AssetDatabase类来管理Asset中资源。
  如：   使用AssetDatabase.LoadAssetAtPath(&quot;Assets/x.txt&quot;)来获取资源对象，需要文件后缀。
</code></pre><h2 id="脚本及编译顺序"><a href="#脚本及编译顺序" class="headerlink" title="脚本及编译顺序"></a>脚本及编译顺序</h2><pre><code> 脚本内容：
Assembly-CSharp-first-pass.csproj: 包括了Assets目录下的Standard Assets, Standard Assets Pro, Plugins三个目录里面的脚本；
Assembly-CSharp-Editorfirst-pass.csproj: 包括了上述三个目录下Editor子目录里面的脚本；
Assembly-CSharp.csproj: 包括了除了上述三个目录和所有Editor目录下的其他脚本；
Assembly-CSharp-Editor.csproj: 包括了其他Editor目录下的所有脚本。
划分为多个工程的理由：
editor 和 runtime 分开， 工具和游戏分开；
减少编辑时的编译时间，一般只会对一个工程进行修改，此时主要编译其中一个工程即可。
注意：
上述四个工程的依赖关系是， 后编译的资源可以依赖于前面的工程，而不能相反；
editor在runtime之后，确保editor工具可以访问runtime脚本。
</code></pre><h2 id="脚本编译流水线"><a href="#脚本编译流水线" class="headerlink" title="脚本编译流水线"></a>脚本编译流水线</h2><p>   Android 平台运行时使用 mono 虚拟机，运行C#程序集，使用 JIT 编译方式；<br>   iOS 平台使用 AOT 编译方式，最后编译成的是native 可运行代码。</p>
<h2 id="资源类型"><a href="#资源类型" class="headerlink" title="资源类型"></a>资源类型</h2><p>   简单列举一下，具体每种类型的资源学问较多，需单独学习。<br>    场景（.scene）<br>    预设（.prefab）<br>    模型（.fbx. .3dmax…）<br>    网格（.mesh）<br>    动画片段（.anim）<br>    材质（.material）<br>    Shader（.shader）<br>    图片精灵<br>    纹理（Texture）<br>    字体（Font）</p>
<h2 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h2><p>   按照我的个人理解，资源就分为这两种类型：<br>    纯资源一般是艺术家（美术）的工作结晶，直接导入 Unity 即可，Unity 通过 XXXImporter 来获取想要的数据，如Mesh, Animation, Texture等。<br>    解释资源则是Unity为了在纯资源的基础上封装得到的资源，如Scene, Prefab等。</p>
<h2 id="资源编译内容"><a href="#资源编译内容" class="headerlink" title="资源编译内容"></a>资源编译内容</h2><pre><code>上述三部分资源最终会被打包到工程中：

Assets/xxx/Resources 目录中的内容， Unity会自动将资源的依赖和依赖关系打到安装包中；

Assets/StreamingAssets 会原封不动的拷贝到安装包中；

ProjectSettings中相关的Scenes以及GraphicSettings中的Shaders。
</code></pre><h2 id="场景加载方法"><a href="#场景加载方法" class="headerlink" title="场景加载方法"></a>场景加载方法</h2><h2 id="Editor目录"><a href="#Editor目录" class="headerlink" title="Editor目录"></a>Editor目录</h2><pre><code>Editor下面放的所有资源文件或者脚本文件都不会被打进发布包中，并且脚本也只能在编辑时使用。一般呢会把一些工具类的脚本放在这里，或者是一些编辑时用的DLL。
</code></pre><h2 id="Editor-Default-Resources目录"><a href="#Editor-Default-Resources目录" class="headerlink" title="Editor Default Resources目录"></a>Editor Default Resources目录</h2><pre><code>Editor Default Resources注意中间是有空格的，它必须放在Project视图的根目录下。编辑器用到的一些资源放在这里，比如图片、文本文件等等。它和Editor文件夹一样都不会被打到最终发布包里，仅仅用于开发时使用。可以直接通过EditorGUIUtility.Load去读取该文件夹下的资源。
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TextAsset text = EditorGUIUtility.Load(<span class="string">"test.txt"</span>) as TextAsset;</div><div class="line">Debug.Log(text.text);</div></pre></td></tr></table></figure>
<h2 id="Gizmos目录"><a href="#Gizmos目录" class="headerlink" title="Gizmos目录"></a>Gizmos目录</h2><pre><code>项目根目录。OnDrawGizmos() 和 OnDrawGizmosSelect()用于在scene视图中绘制一些小物件。此函数需用到的资源放在Gizmos目录中, 使用时直接引用文件名。
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void <span class="function"><span class="title">OnDrawGizmos</span></span>()</div><div class="line">&#123;</div><div class="line">    Gizmos.DrawIcon(transform.position, <span class="string">"0.png"</span>, <span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Plugins目录"><a href="#Plugins目录" class="headerlink" title="Plugins目录"></a>Plugins目录</h2><pre><code>做手机游戏开发一般 andoird 或者 ios 要接一些sdk 可以把sdk依赖的库文件 放在这里，比如 .so .jar .a 文件。这样打完包以后就会自动把这些文件打在你的包中。
</code></pre><h2 id="WebPlayerTemplates-目录"><a href="#WebPlayerTemplates-目录" class="headerlink" title="WebPlayerTemplates 目录"></a>WebPlayerTemplates 目录</h2><pre><code>根目录下。此目录内的脚本不会编译，可以将不需要到不希望删掉的脚本放在此目录下。
</code></pre><h2 id="Resources目录资源动态加载和卸载"><a href="#Resources目录资源动态加载和卸载" class="headerlink" title="Resources目录资源动态加载和卸载"></a>Resources目录资源动态加载和卸载</h2><pre><code>   在工程进行打包后，Resource文件夹中的资源将进行加密与压缩，打包后的程序内将不存在Resource文件夹，故无法通过路径访问以及更新资源。使用Resource.Load(string) (path不加后缀)加载到内存后使用，加载的将一直保存到内存中。使用Resource。UnLoadAssets(Object) 或 Resource.UnloadUnusedAssets()来释放内存。Unused一般指此内存区域不可达。
      Resources.Load 可以加载 Resources 目录中的一个资源，参数以 Resources 目录为根目录，且不需要后缀名，然后Unity也提供了异步加载资源的方法；
Resources.LoadAssetAtPath(Assets/x.txt)：可以读取Assets目录下的任意文件夹下的资源，它可以在编辑时或者编辑器运行时用，但是它不能在真机上用，它的路径是”Assets/xx/xx.xxx” 必须是这种路径，并且要带文件的后缀名。
Resources.UnloadAsset可以卸载上述 API 加载的资源，对 GameObject 不起作用；
Resources.UnloadUnusedAssets 可以通过 GC 方式对所有未引用的资源进行卸载；
Editor环境提供了 AssetDataBase.LoadAssetAtPath，一般在写 Editor 工具时候会用到。

  技巧：
假如手机上选择一部分资源要打assetbundle，一部分资源Resource.Load().那么在做.apk或者.ipa的时候 现在都是用脚本来自动化打包，在打包之前 可以用AssetDatabase.MoveAsset()把已经打包成assetbundle的原始文件从Resources文件夹下移动出去在打包，这样打出来的运行包就不会包行多余的文件了。打完包以后再把移动出去的文件夹移动回来。
</code></pre><h2 id="StreamingAssets目录资源记载"><a href="#StreamingAssets目录资源记载" class="headerlink" title="StreamingAssets目录资源记载"></a>StreamingAssets目录资源记载</h2><pre><code>为流媒体文件夹，此文件夹内的资源将不会经过压缩与加密，原封不动的打包进游戏包内。在游戏安装时，StreamAssets文件件内的资源将根据平台，移动到对应的文件夹内。它在各个平台下的路径是不同的，不过你可以用Application.streamingAssetsPath 它会根据当前的平台选择对应的路径。
地址： 
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#if UNITY_EDITOR</span></div><div class="line">   string filePath = Application.dataPath + “/StreamingAssets/” + “eg.xml”; //可读写</div><div class="line"><span class="comment">#elif UNITY_ANDROID</span></div><div class="line">   string filePath =”jar:file://”+  Application.dataPath + “!/assets/” + “eg.xml”;//只读</div><div class="line"><span class="comment">#elif UNITY_IPHONE</span></div><div class="line">   string filePth = Application.dataPath + “/Raw/” + “eg.xml”;//只读</div><div class="line"><span class="comment">#endif</span></div></pre></td></tr></table></figure>
<pre><code>此文件路径里的文件保存为二进制文件，只能通过IO Stream或者WWW的方式读取（AssetBundle除外）。
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">///IO Stream</div><div class="line">using(FileStream stream =  File.Open(Application.streamingAssetsPath+<span class="string">"fileName"</span>, FileMode.Open)) </div><div class="line">&#123; </div><div class="line">//处理方法 </div><div class="line">&#125; </div><div class="line"></div><div class="line">///WWW方式（注意协议与不同平台下路径的区别）</div><div class="line">using(WWW www = new WWW( Application.streamingAssetsPath+<span class="string">"fileName"</span>)) </div><div class="line">&#123; </div><div class="line">yield <span class="built_in">return</span> www; </div><div class="line">www.text; </div><div class="line">www.texture; </div><div class="line">&#125; </div><div class="line"></div><div class="line">///AssetBundle特有的同步读取方式（注意安卓平台下的路径区别）</div><div class="line">string assetbundlePath = </div><div class="line"><span class="comment">#if UNITY_ANDROID </span></div><div class="line">Application.dataPath+<span class="string">"!/assets"</span>; </div><div class="line"><span class="comment">#else </span></div><div class="line">Application.streamingAssetsPath; </div><div class="line"><span class="comment">#endif  </span></div><div class="line"></div><div class="line">AssetBundle.LoadFromFile(assetbundlePath+<span class="string">"/name.unity3d"</span>);</div></pre></td></tr></table></figure>
<pre><code>StreamingAssets目录下的资源都是不压缩的，所以它比较大会占空间。

技巧：
有些游戏为了让所有的资源全部使用assetbundle，会把一些初始的assetbundle放在StreamingAssets目录下，运行程序的时候在把这些assetbundle拷贝在Application.persistentDataPath目录下，如果这些assetbundle有更新的话，那么下载到新的assetbundle在把Application.persistentDataPath目录下原有的覆盖掉。
</code></pre><h2 id="Application-dataPath-、Application-persistentDataPath"><a href="#Application-dataPath-、Application-persistentDataPath" class="headerlink" title="Application.dataPath 、Application.persistentDataPath"></a>Application.dataPath 、Application.persistentDataPath</h2><pre><code> Application.dataPath为项目根目录。
 Application.persistentDataPath是应用程序的沙盒目录，打包之前是没有这个目录的，直到应用程序在手机上安装完毕才有这个目录。该文件夹只能通过IO Stream以及WWW的方式进行资源加载。读写：
Android： 导出时write acess选择sd卡，否则就失去了读写的意义。注意，www时Application.persistentDataPath返回的路径不会自动添加协议，需要手动添加，协议是file://而不是jar:// 因为导出包是选择SD卡，该目录会在SD卡中暴露出来，无需root权限，属于本地文件，因此需要本地文件协议file://读取。
</code></pre><h2 id="资源档案meta文件"><a href="#资源档案meta文件" class="headerlink" title="资源档案meta文件"></a>资源档案meta文件</h2><pre><code>每个 Assets 目录中的资源都会生成有一个meta文件“伴读”，该文件的作用有二：
Import 资源保存 ImportSetting；
保存每个资源的 guid，后文介绍。
注意该文件需要纳入SVN进行管理，否则会导致资源引用关系在不用项目成员之间发生混乱。
</code></pre><h2 id="资源”身份证”——guid"><a href="#资源”身份证”——guid" class="headerlink" title="资源”身份证”——guid"></a>资源”身份证”——guid</h2><pre><code> Assets每个资源都有一个meta文件，文件中记录了一个 guid，这个guid用于记录资源之间的引用关系，引用关系在介绍到后文的 fileID 后一并介绍。
 这里介绍 guid 的生成规则：
工程新import或者创建一个资源，生成 meta 文件和 guid；
删除meta文件后，重新导入资源会生成新的 meta 文件和 guid；
在 非Unity中移动资源位置，会重新生成新的 meta 文件和 guid。
 另外guid的生成规则不是单纯按照目录结构或者资源内容来的，多次生成的guid是不同的，这也就是meta文件需要提交的原因，防止同一个资源在不同人的工程中生成不同的guid。
</code></pre><h2 id="fileID和资源引用关系"><a href="#fileID和资源引用关系" class="headerlink" title="fileID和资源引用关系"></a>fileID和资源引用关系</h2><pre><code>首先介绍 fileID，fileID用于标识资源内部的资源。一般fileID也是直接记录在 meta 文件里面的。
资源间的依赖关系使用&lt;fileID , guid&gt;来确定；
资源内部的依赖关系使用 fileID。
</code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><pre><code>资源被打包到安装包中后，安装后的资源目录是一个只读目录，那么安装完成后怎么添加新的资源？
Resources.Load 函数只支持从 Resources 目录加载资源。如果更新的资源存在别的地方改怎么办？
</code></pre>]]></content>
    
    <summary type="html">
    
      Unity资源基础
    
    </summary>
    
      <category term="Unity基础" scheme="http://yoursite.com/categories/Unity%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Xml</title>
    <link href="http://yoursite.com/2017/06/05/Xml/"/>
    <id>http://yoursite.com/2017/06/05/Xml/</id>
    <published>2017-06-05T06:45:44.000Z</published>
    <updated>2017-06-06T08:03:27.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>XML即可扩展标记语言(eXtensible Markup Language)。标记是指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等。如何定义这些标记，既可以选择国际通用的标记语言，比如HTML，也可以使用象XML这样由相关人士自由决定的标记语言，这就是语言的可扩展性。XML是从SGML中简化修改出来的。它主要用到的有XML、XSL和XPath等。</p>
<p>在程序中访问进而操作XML文件一般有两种模型，分别是使用DOM（文档对象模型）和流模型，使用DOM的好处在于它允许编辑和更新XML文档，可以随机访问文档中的数据，可以使用XPath查询，但是，DOM的缺点在于它需要一次性的加载整个文档到内存中，对于大型的文档，这会造成资源问题。流模型很好的解决了这个问题，因为它对XML文件的访问采用的是流的概念，也就是说，任何时候在内存中只有当前节点，但它也有它的不足，它是只读的，仅向前的，不能在文档中执行向后导航操作。</p>
<p>下面我将介绍三种常用的读取XML文件的方法。分别是</p>
<p>   1: 使用 XmlDocument<br>   2: 使用 XmlTextReader<br>   3: 使用 Linq to Xml</p>
<p>这里我先创建一个XML文件,名为Book.xml下面所有的方法都是基于这个XML文件的,文件内容如下:</p>
<p> &lt;?xml version=”1.0” encoding=”utf-8”?&gt;<br> <bookstore><br>   <!--记录书本的信息--><br>   <book type="必修课" isbn="7-111-19149-2"><br>      <title>数据结构</title><br>      <author>严蔚敏</author><br>      <price>30.00</price><br>    </book><br>    <book type="必修课" isbn="7-111-19149-3"><br>      <title>路由型与交换型互联网基础</title><br>      <author>程庆梅</author><br>      <price>27.00</price><br>    </book><br>    <book type="必修课" isbn="7-111-19149-4"><br>      <title>计算机硬件技术基础</title><br>      <author>李继灿</author><br>      <price>25.00</price><br>    </book><br>    <book type="必修课" isbn="7-111-19149-5"><br>      <title>软件质量保证与管理</title><br>      <author>朱少民</author><br>      <price>39.00</price><br>    </book><br>    <book type="必修课" isbn="7-111-19149-6"><br>      <title>算法设计与分析</title><br>      <author>王红梅</author><br>      <price>23.00</price><br>    </book><br>    <book type="选修课" isbn="7-111-19149-1"><br>      <title>计算机操作系统</title><br>      <author>7-111-19149-1</author><br>      <price>28</price><br>    </book><br> </bookstore></p>
<p>为了方便读取,我还定义一个书的实体类,名为BookModel,具体内容如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">  </div><div class="line">namespace 使用XmlDocument</div><div class="line">  &#123;</div><div class="line">     public class BookModel</div><div class="line">      &#123;</div><div class="line">        public <span class="function"><span class="title">BookModel</span></span>()</div><div class="line">         &#123; &#125;</div><div class="line">        /// &lt;summary&gt;</div><div class="line">        /// 所对应的课程类型</div><div class="line">        /// &lt;/summary&gt;</div><div class="line">        private string bookType;</div><div class="line"></div><div class="line">        public string BookType</div><div class="line">        &#123;</div><div class="line">            get &#123; <span class="built_in">return</span> bookType; &#125;</div><div class="line">            <span class="built_in">set</span> &#123; bookType = value; &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /// &lt;summary&gt;</div><div class="line">        /// 书所对应的ISBN号</div><div class="line">        /// &lt;/summary&gt;</div><div class="line">        private string bookISBN;</div><div class="line"> </div><div class="line">        public string BookISBN</div><div class="line">        &#123;</div><div class="line">            get &#123; <span class="built_in">return</span> bookISBN; &#125;</div><div class="line">            <span class="built_in">set</span> &#123; bookISBN = value; &#125;</div><div class="line">        &#125;  </div><div class="line">        /// &lt;summary&gt;</div><div class="line">        /// 书名</div><div class="line">        /// &lt;/summary&gt;</div><div class="line">        private string bookName;</div><div class="line"> </div><div class="line">        public string BookName</div><div class="line">        &#123;</div><div class="line">            get &#123; <span class="built_in">return</span> bookName; &#125;</div><div class="line">            <span class="built_in">set</span> &#123; bookName = value; &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        /// &lt;summary&gt;</div><div class="line">        /// 作者</div><div class="line">        /// &lt;/summary&gt;</div><div class="line">        private string bookAuthor;</div><div class="line"> </div><div class="line">        public string BookAuthor</div><div class="line">        &#123;</div><div class="line">            get &#123; <span class="built_in">return</span> bookAuthor; &#125;</div><div class="line">            <span class="built_in">set</span> &#123; bookAuthor = value; &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /// &lt;summary&gt;</div><div class="line">        /// 价格</div><div class="line">        /// &lt;/summary&gt;</div><div class="line">        private double bookPrice;</div><div class="line"> </div><div class="line">        public double BookPrice</div><div class="line">        &#123;</div><div class="line">            get &#123; <span class="built_in">return</span> bookPrice; &#125;</div><div class="line">            <span class="built_in">set</span> &#123; bookPrice = value; &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用XmlDocument"><a href="#使用XmlDocument" class="headerlink" title="使用XmlDocument"></a>使用XmlDocument</h2><p>使用XmlDocument是一种基于文档结构模型的方式来读取XML文件.在XML文件中,我们可以把XML看作是由文档声明(Declare),元素(Element),属性(Attribute),文本(Text)等构成的一个树.最开始的一个结点叫作根结点,每个结点都可以有自己的子结点.得到一个结点后,可以通过一系列属性或方法得到这个结点的值或其它的一些属性.例如:</p>
<p> xn 代表一个结点<br> xn.Name;//这个结点的名称<br> xn.Value;//这个结点的值<br> xn.ChildNodes;//这个结点的所有子结点<br> xn.ParentNode;//这个结点的父结点</p>
<h3 id="读取所有的数据"><a href="#读取所有的数据" class="headerlink" title="读取所有的数据"></a>读取所有的数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">using System.Xml;</div><div class="line"></div><div class="line">XmlDocument xml=new XmlDocument();//初始化一个xml实例</div><div class="line">xml.Load(path);//导入指定xml文件</div><div class="line">//xml.Load(HttpContext.Current.Server.MapPath(<span class="string">"~/file/bookstore.xml"</span>));</div><div class="line">XmlReaderSettings settings = new XmlReaderSettings();</div><div class="line">settings.IgnoreComments = <span class="literal">true</span>;//忽略文档里面的注释</div><div class="line">XmlNode root=xml.SelectSingleNode(<span class="string">"bookstore"</span>);//得到根节点</div><div class="line"></div><div class="line">XmlNodeList childlist=root.ChildNodes;//获取节点下所有直接子节点</div><div class="line">foreach (XmlNode xn1 <span class="keyword">in</span> xnl)</div><div class="line">  &#123;</div><div class="line">     BookModel bookModel = new BookModel();</div><div class="line">     // 将节点转换为元素，便于得到节点的属性值</div><div class="line">     XmlElement xe = (XmlElement)xn1;</div><div class="line">     // 得到Type和ISBN两个属性的属性值</div><div class="line">     bookModel.BookISBN = xe.GetAttribute(<span class="string">"ISBN"</span>).ToString();</div><div class="line">     bookModel.BookType = xe.GetAttribute(<span class="string">"Type"</span>).ToString();</div><div class="line">     // 得到Book节点的所有子节点</div><div class="line">     XmlNodeList xnl0 = xe.ChildNodes;</div><div class="line">     bookModel.BookName=xnl0.Item(0).InnerText;</div><div class="line">     bookModel.BookAuthor=xnl0.Item(1).InnerText;</div><div class="line">     bookModel.BookPrice=Convert.ToDouble(xnl0.Item(2).InnerText);</div><div class="line">     bookModeList.Add(bookModel);</div><div class="line"> &#125;</div><div class="line"> dgvBookInfo.DataSource = bookModeList;</div><div class="line"></div><div class="line">//XmlNodeList nodelist=xml.SelectNodes(<span class="string">"/Root/News"</span>);//获取同名同级节点集合string id=node.Attributes[<span class="string">"id"</span>].Value;//获取指定节点的指定属性值</div><div class="line">string content=node.InnerText;//获取指定节点中的文本</div><div class="line">root.HasChildNodes;//判断该节点下是否有子节点</div></pre></td></tr></table></figure>
<h3 id="增加一本书的信息"><a href="#增加一本书的信息" class="headerlink" title="增加一本书的信息"></a>增加一本书的信息</h3><p>向文件中添加新的数据的时候,首先也是通过XmlDocument加载整个文档,然后通过调用SelectSingleNode方法获得根结点,通过CreateElement方法创建元素,用CreateAttribute创建属性,用AppendChild把当前结点挂接在其它结点上,用SetAttributeNode设置结点的属性.具体代码如下:</p>
<p>加载文件并选出要结点:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> XmlDocument doc = new XmlDocument();</div><div class="line"> doc.Load(@<span class="string">"..\..\Book.xml"</span>);</div><div class="line"> XmlNode root = doc.SelectSingleNode(<span class="string">"bookstore"</span>);</div><div class="line"></div><div class="line"> ///创建一个结点,并设置结点的属性:</div><div class="line"> XmlElement xelKey = doc.CreateElement(<span class="string">"book"</span>);</div><div class="line"> XmlAttribute xelType = doc.CreateAttribute(<span class="string">"Type"</span>);</div><div class="line"> xelType.InnerText = <span class="string">"adfdsf"</span>;</div><div class="line"> xelKey.SetAttributeNode(xelType);</div><div class="line"></div><div class="line"> ///创建子结点:</div><div class="line"> XmlElement xelAuthor = doc.CreateElement(<span class="string">"author"</span>);</div><div class="line"> xelAuthor.InnerText = <span class="string">"dfdsa"</span>;</div><div class="line"> xelKey.AppendChild(xelAuthor);</div><div class="line"></div><div class="line">///最后把book结点挂接在要结点上,并保存整个文件:</div><div class="line"> root.AppendChild(xelKey);</div><div class="line"> doc.Save(@<span class="string">"..\..\Book.xml"</span>);</div></pre></td></tr></table></figure>
<p>用上面的方法,是向已有的文件上追加数据,如果想覆盖原有的所有数据,可以更改一下,使用LoadXml方法:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">XmlDocument doc = new XmlDocument();</div><div class="line">doc.LoadXml(<span class="string">"&lt;bookstore&gt;&lt;/bookstore&gt;"</span>);//用这句话,会把以前的数据全部覆盖掉,只有你增加的数据</div></pre></td></tr></table></figure>
<p>直接把根结点选择出来了,后面不用SelectSingleNode方法选择根结点,直接创建结点即可,代码同上。</p>
<h3 id="删除某一个数据"><a href="#删除某一个数据" class="headerlink" title="删除某一个数据"></a>删除某一个数据</h3><p>想要删除某一个结点,直接找到其父结点,然后调用RemoveChild方法即可,现在关键的问题是如何找到这个结点,上面的SelectSingleNode可以传入一个Xpath表,我们通过书的ISBN号来找到这本书所在的结点.如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">XmlElement xe = xmlDoc.DocumentElement; // DocumentElement 获取xml文档对象的根XmlElement.</div><div class="line">string strPath = string.Format(<span class="string">"/bookstore/book[@ISBN=\"&#123;0&#125;\"]"</span>, dgvBookInfo.CurrentRow.Cells[1].Value.ToString());</div><div class="line">XmlElement selectXe = (XmlElement)xe.SelectSingleNode(strPath);  //selectSingleNode 根据XPath表达式,获得符合条件的第一个节点.</div><div class="line">selectXe.ParentNode.RemoveChild(selectXe);</div></pre></td></tr></table></figure>
<h3 id="修改某要条数据"><a href="#修改某要条数据" class="headerlink" title="修改某要条数据"></a>修改某要条数据</h3><p>修改某条数据的话,首先也是用Xpath表达式找到所需要修改的那一个结点,然后如果是元素的话,就直接对这个元素赋值,如果是属性的话,就用SetAttribute方法设置即可.如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">XmlElement xe = xmlDoc.DocumentElement; // DocumentElement 获取xml文档对象的根XmlElement.</div><div class="line">string strPath = string.Format(<span class="string">"/bookstore/book[@ISBN=\"&#123;0&#125;\"]"</span>, dgvBookInfo.CurrentRow.Cells[1].Value.ToString());</div><div class="line">XmlElement selectXe = (XmlElement)xe.SelectSingleNode(strPath);  //selectSingleNode 根据XPath表达式,获得符合条件的第一个节点.</div><div class="line">selectXe.SetAttribute(<span class="string">"Type"</span>, dgvBookInfo.CurrentRow.Cells[0].Value.ToString());//也可以通过SetAttribute来增加一个属性</div><div class="line">selectXe.GetElementsByTagName(<span class="string">"title"</span>).Item(0).InnerText = dgvBookInfo.CurrentRow.Cells[2].Value.ToString();</div><div class="line">selectXe.GetElementsByTagName(<span class="string">"author"</span>).Item(0).InnerText = dgvBookInfo.CurrentRow.Cells[3].Value.ToString();</div><div class="line">selectXe.GetElementsByTagName(<span class="string">"price"</span>).Item(0).InnerText = dgvBookInfo.CurrentRow.Cells[4].Value.ToString();</div><div class="line">xmlDoc.Save(@<span class="string">"..\..\Book.xml"</span>);</div></pre></td></tr></table></figure>
<h2 id="XmlReader-XmlWriter"><a href="#XmlReader-XmlWriter" class="headerlink" title="XmlReader XmlWriter"></a>XmlReader XmlWriter</h2><p>XmlTextReader和XmlTextWriter是以流的形式来读写XML文件。</p>
<h3 id="XmlTextReader"><a href="#XmlTextReader" class="headerlink" title="XmlTextReader"></a>XmlTextReader</h3><p>使用XmlTextReader读取数据的时候,首先创建一个流,然后用read()方法来不断的向下读,根据读取的结点的类型来进行相应的操作.如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">XmlTextReader reader = new XmlTextReader(@<span class="string">"..\..\Book.xml"</span>);</div><div class="line">List&lt;BookModel&gt; modelList = new List&lt;BookModel&gt;();</div><div class="line">BookModel model = new BookModel();</div><div class="line"><span class="keyword">while</span> (reader.Read())</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (reader.NodeType == XmlNodeType.Element)</div><div class="line">       &#123;</div><div class="line">          <span class="keyword">if</span> (reader.Name == <span class="string">"book"</span>)</div><div class="line">             &#123;</div><div class="line">                   model.BookType = reader.GetAttribute(0);</div><div class="line">                   model.BookISBN = reader.GetAttribute(1);</div><div class="line">            &#125;</div><div class="line">          <span class="keyword">if</span> (reader.Name == <span class="string">"title"</span>)</div><div class="line">             &#123;</div><div class="line">                 model.BookName=reader.ReadElementString().Trim();</div><div class="line">             &#125;</div><div class="line">          <span class="keyword">if</span> (reader.Name == <span class="string">"author"</span>)</div><div class="line">            &#123;</div><div class="line">                model.BookAuthor = reader.ReadElementString().Trim();</div><div class="line">             &#125;</div><div class="line">           <span class="keyword">if</span> (reader.Name == <span class="string">"price"</span>)</div><div class="line">            &#123;</div><div class="line">                model.BookPrice = Convert.ToDouble(reader.ReadElementString().Trim());</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (reader.NodeType == XmlNodeType.EndElement)</div><div class="line">             &#123;</div><div class="line">                 modelList.Add(model);</div><div class="line">                 model = new BookModel();</div><div class="line">             &#125;         </div><div class="line"> &#125;</div><div class="line">  modelList.RemoveAt(modelList.Count-1);</div><div class="line">  this.dgvBookInfo.DataSource = modelList;</div></pre></td></tr></table></figure>
<p>关键是读取属性的时候,你要先知道哪一个结点具有几个属性,然后通过GetAttribute方法来读取.读取属性还可以用另外一种方法,就是用MoveToAttribute方法.可参见下面的代码:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (reader.Name == <span class="string">"book"</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (int i = 0; i &lt; reader.AttributeCount; i++)</div><div class="line">        &#123;</div><div class="line">            reader.MoveToAttribute(i);</div><div class="line">            string str = <span class="string">"属性："</span> + reader.Name + <span class="string">"="</span> + reader.Value;</div><div class="line">        &#125;</div><div class="line">        model.BookType = reader.GetAttribute(0);</div><div class="line">        model.BookISBN = reader.GetAttribute(1);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Xml
    
    </summary>
    
      <category term="Json" scheme="http://yoursite.com/categories/Json/"/>
    
    
      <category term="Xml" scheme="http://yoursite.com/tags/Xml/"/>
    
  </entry>
  
  <entry>
    <title>Json</title>
    <link href="http://yoursite.com/2017/06/05/Json/"/>
    <id>http://yoursite.com/2017/06/05/Json/</id>
    <published>2017-06-05T02:58:24.000Z</published>
    <updated>2017-06-06T08:03:37.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Json简介"><a href="#Json简介" class="headerlink" title="Json简介"></a>Json简介</h1><p>　JSON(全称为JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript语法标准的一个子集。 JSON采用完全独立于语言的文本格式，可以很容易在各种网络、平台和程序之间传输。JSON的语法很简单，易于人阅读和编写，同时也易于机器解析和生成。</p>
<h2 id="Json格式"><a href="#Json格式" class="headerlink" title="Json格式"></a>Json格式</h2><p>JSON语法</p>
<ol>
<li><p>JSON 语法是 JavaScript 对象表示法语法的子集。</p>
<p>· 数据在名称/值对中：名称是字符串，使用双引号表示。值可以是：数字（整数或浮点数），字符串（在双引号中）,数组（在方括号中）,对象（在花括号中），true/false/null。<br>· 数据由逗号分隔：<br>· 花括号保存对象：对象可以包含各种数据，包括数组。<br>· 方括号保存数组：数字可以包含对象。</p>
</li>
</ol>
<p>如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Person</div><div class="line">        &#123;</div><div class="line">                public string name;</div><div class="line">                public int age;</div><div class="line">                public Person(string _name, int _age)</div><div class="line">                &#123;</div><div class="line">                        name = _name;</div><div class="line">                        age = _age;</div><div class="line">                &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>对象Person p1 = new Person(“hua”, 20);<br>JSON表示就是：{“name”:”hua”, “age”:20}</p>
<p>Person p2 = new Person(“Test”, 23);<br>数组：Person[] xx = new Person<a href="p1,p2"></a>;<br>JSON表示:<br>{“people”:[{“name”:”hua”, “age”:20},{“name”:”Test”,”age”:23}]}</p>
<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>序列化就是把一个对象保存到一个文件或数据库字段中去。<br>反序列化就是在适当的时候把这个文件再转化成原来的对象使用。</p>
<h1 id="Json的序列化和反序列化"><a href="#Json的序列化和反序列化" class="headerlink" title="Json的序列化和反序列化"></a>Json的序列化和反序列化</h1><h2 id="C-中Json的序列化与反序列化"><a href="#C-中Json的序列化与反序列化" class="headerlink" title="C#中Json的序列化与反序列化"></a>C#中Json的序列化与反序列化</h2><ol>
<li><p>原始方式：自己按照JSON的语法格式，写代码直接操作JSON字符串。如非必要，应该很少人会走这条路，从头再来的。</p>
</li>
<li><p>通用方式：使用开源的类库Newtonsoft.Json。通常可以使用JsonObject, JsonReader, JsonWriter处理。支持枚举，数组，集合，字典，对象，string, int,</p>
</li>
</ol>
<p>(1)  序列化 对象、集合、 字典：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">///序列化对象</div><div class="line">public class Account</div><div class="line">&#123;</div><div class="line">    public string Email &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    public bool Active &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    public DateTime CreatedDate &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    public IList&lt;string&gt; Roles &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Account account = new Account</div><div class="line"> &#123;</div><div class="line">     Email = <span class="string">"james@example.com"</span>,</div><div class="line">     Active = <span class="literal">true</span>,</div><div class="line">     CreatedDate = new DateTime(2013, 1, 20, 0, 0, 0, DateTimeKind.Utc),</div><div class="line">     Roles = new List&lt;string&gt;</div><div class="line">     &#123;</div><div class="line">         <span class="string">"User"</span>,</div><div class="line">         <span class="string">"Admin"</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">string json = JsonConvert.SerializeObject(account, Formatting.Indented);</div><div class="line">// &#123;</div><div class="line">//   <span class="string">"Email"</span>: <span class="string">"james@example.com"</span>,</div><div class="line">//   <span class="string">"Active"</span>: <span class="literal">true</span>,</div><div class="line">//   <span class="string">"CreatedDate"</span>: <span class="string">"2013-01-20T00:00:00Z"</span>,</div><div class="line">//   <span class="string">"Roles"</span>: [</div><div class="line">//     <span class="string">"User"</span>,</div><div class="line">//     <span class="string">"Admin"</span></div><div class="line">//   ]</div><div class="line">// &#125;</div><div class="line"></div><div class="line"></div><div class="line">///序列化集合</div><div class="line"> List&lt;string&gt; videogames = new List&lt;string&gt;</div><div class="line"> &#123;</div><div class="line">     <span class="string">"Starcraft"</span>,</div><div class="line">     <span class="string">"Halo"</span>,</div><div class="line">     <span class="string">"Legend of Zelda"</span></div><div class="line"> &#125;;</div><div class="line"> </div><div class="line">string json = JsonConvert.SerializeObject(videogames);</div><div class="line">Console.WriteLine(json);</div><div class="line">// [<span class="string">"Starcraft"</span>,<span class="string">"Halo"</span>,<span class="string">"Legend of Zelda"</span>]</div><div class="line"></div><div class="line">///序列化字典</div><div class="line">Dictionary&lt;string, int&gt; points = new Dictionary&lt;string, int&gt;</div><div class="line"> &#123;</div><div class="line">     &#123; <span class="string">"James"</span>, 9001 &#125;,</div><div class="line">     &#123; <span class="string">"Jo"</span>, 3474 &#125;,</div><div class="line">     &#123; <span class="string">"Jess"</span>, 11926 &#125;</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line">string json = JsonConvert.SerializeObject(points, Formatting.Indented);</div><div class="line">Console.WriteLine(json);</div><div class="line">// &#123;</div><div class="line">//   <span class="string">"James"</span>: 9001,</div><div class="line">//   <span class="string">"Jo"</span>: 3474,</div><div class="line">//   <span class="string">"Jess"</span>: 11926</div><div class="line">// &#125;</div></pre></td></tr></table></figure>
<p>序列化函数： JsonConvert.SerializeObject(object value, Formatting formatting)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">///序列化枚举</div><div class="line">List&lt;StringComparison&gt; stringComparisons = new List&lt;StringComparison&gt;</div><div class="line"> &#123;</div><div class="line">     StringComparison.CurrentCulture,</div><div class="line">     StringComparison.Ordinal</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line">string jsonWithoutConverter = JsonConvert.SerializeObject(stringComparisons);</div><div class="line"> </div><div class="line">Console.WriteLine(jsonWithoutConverter);</div><div class="line">// [0,4]</div><div class="line"></div><div class="line">string jsonWithConverter = JsonConvert.SerializeObject(stringComparisons, new StringEnumConverter());</div><div class="line"></div><div class="line">Console.WriteLine(jsonWithConverter);</div><div class="line">// [<span class="string">"CurrentCulture"</span>,<span class="string">"Ordinal"</span>]</div><div class="line"></div><div class="line">List&lt;StringComparison&gt; newStringComparsions = JsonConvert.DeserializeObject&lt;List&lt;StringComparison&gt;&gt;(</div><div class="line">    jsonWithConverter,</div><div class="line">    new StringEnumConverter());</div><div class="line"></div><div class="line">Console.WriteLine(string.Join(<span class="string">", "</span>, newStringComparsions.Select(c =&gt; c.ToString()).ToArray()));</div><div class="line">// CurrentCulture, Ordinal</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">///序列化DataSet</div><div class="line">DataSet dataSet = new DataSet(<span class="string">"dataSet"</span>);</div><div class="line">dataSet.Namespace = <span class="string">"NetFrameWork"</span>;</div><div class="line">DataTable table = new DataTable();</div><div class="line">DataColumn idColumn = new DataColumn(<span class="string">"id"</span>, typeof(int));</div><div class="line">idColumn.AutoIncrement = <span class="literal">true</span>;</div><div class="line"></div><div class="line">DataColumn itemColumn = new DataColumn(<span class="string">"item"</span>);</div><div class="line">table.Columns.Add(idColumn);</div><div class="line">table.Columns.Add(itemColumn);</div><div class="line">dataSet.Tables.Add(table);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (int i = 0; i &lt; 2; i++)</div><div class="line">&#123;</div><div class="line">    DataRow newRow = table.NewRow();</div><div class="line">    newRow[<span class="string">"item"</span>] = <span class="string">"item "</span> + i;</div><div class="line">    table.Rows.Add(newRow);</div><div class="line">&#125;</div><div class="line"></div><div class="line">dataSet.AcceptChanges();</div><div class="line"></div><div class="line">string json = JsonConvert.SerializeObject(dataSet, Formatting.Indented);</div><div class="line"></div><div class="line">Console.WriteLine(json);</div><div class="line">// &#123;</div><div class="line">//   <span class="string">"Table1"</span>: [</div><div class="line">//     &#123;</div><div class="line">//       <span class="string">"id"</span>: 0,</div><div class="line">//       <span class="string">"item"</span>: <span class="string">"item 0"</span></div><div class="line">//     &#125;,</div><div class="line">//     &#123;</div><div class="line">//       <span class="string">"id"</span>: 1,</div><div class="line">//       <span class="string">"item"</span>: <span class="string">"item 1"</span></div><div class="line">//     &#125;</div><div class="line">//   ]</div><div class="line">// &#125;</div></pre></td></tr></table></figure>
<p>根据条件判断序列化是否忽略某属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"> public class Employee</div><div class="line"> &#123;</div><div class="line">     public string Name &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">     public Employee Manager &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line"> </div><div class="line">     public bool <span class="function"><span class="title">ShouldSerializeManager</span></span>()</div><div class="line">     &#123;</div><div class="line">         // don<span class="string">'t serialize the Manager property if an employee is their own manager</span></div><div class="line">         return (Manager != this);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> Employee joe = new Employee();</div><div class="line"> joe.Name = "Joe Employee";</div><div class="line"> Employee mike = new Employee();</div><div class="line"> mike.Name = "Mike Manager";</div><div class="line"> </div><div class="line"> joe.Manager = mike;</div><div class="line"> </div><div class="line">// mike is his own manager</div><div class="line">// ShouldSerialize will skip this property</div><div class="line">mike.Manager = mike;</div><div class="line"></div><div class="line">string json = JsonConvert.SerializeObject(new[] &#123; joe, mike &#125;, Formatting.Indented);</div><div class="line"></div><div class="line">Console.WriteLine(json);</div><div class="line">// [</div><div class="line">//   &#123;</div><div class="line">//     "Name": "Joe Employee",</div><div class="line">//     "Manager": &#123;</div><div class="line">//       "Name": "Mike Manager"</div><div class="line">//     &#125;</div><div class="line">//   &#125;,</div><div class="line">//   &#123;</div><div class="line">//     "Name": "Mike Manager"</div><div class="line">//   &#125;</div><div class="line">// ]</div></pre></td></tr></table></figure></p>
<p>反序列化函数： JsonConvert.DeserializeObject<t>(json);<br>             JsonConvert.DeserializeAnonymousType(json, object);<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var definition = new &#123; Name = <span class="string">""</span> &#125;;</div><div class="line"></div><div class="line">string json1 = @<span class="string">"&#123;'Name':'James'&#125;"</span>;</div><div class="line">var customer1 = JsonConvert.DeserializeAnonymousType(json1, definition);</div><div class="line">Console.WriteLine(customer1.Name);</div><div class="line">// James</div></pre></td></tr></table></figure></t></p>
<ol>
<li>内置方式：使用.NET Framework 3.5/4.0中提供的System.Web.Script.Serialization命名空间下的JavaScriptSerializer类进行对象的序列化与反序列化，很直接。只能在Web环境使用。序列化与反序列化是深拷贝的一种典型的实现方式。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Project</div><div class="line">&#123;</div><div class="line">    public string Input &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    public string Output &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Project p = new <span class="function"><span class="title">Project</span></span>() &#123; Input = <span class="string">"stone"</span>, Output = <span class="string">"gold"</span> &#125;;</div><div class="line">JavaScriptSerializer serializer = new JavaScriptSerializer();</div><div class="line">var json = serializer.Serialize(p);</div><div class="line">Console.WriteLine(json);</div><div class="line"></div><div class="line">var p1 = serializer.Deserialize&lt;Project&gt;(json);</div><div class="line">Console.WriteLine(p1.Input + <span class="string">"=&gt;"</span> + p1.Output);</div><div class="line">Console.WriteLine(ReferenceEquals(p,p1));</div></pre></td></tr></table></figure>
<ol>
<li>契约方式：使用System.Runtime.Serialization.dll提供的DataContractJsonSerializer或者 JsonReaderWriterFactory实现。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Project p = new <span class="function"><span class="title">Project</span></span>() &#123; Input = <span class="string">"stone"</span>, Output = <span class="string">"gold"</span> &#125;;</div><div class="line">;</div><div class="line">string jsonText;</div><div class="line"></div><div class="line">using (MemoryStream stream = new MemoryStream())</div><div class="line">&#123;</div><div class="line">    DataContractJsonSerializer serializer = new DataContractJsonSerializer(p.GetType()).WriteObject(stream, p);</div><div class="line">    jsonText = Encoding.UTF8.GetString(stream.ToArray());</div><div class="line">    Console.WriteLine(jsonText);</div><div class="line">&#125;</div><div class="line"></div><div class="line">using (MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(jsonText)))</div><div class="line">&#123;</div><div class="line">    Project p1 = (Project)DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(Project)).ReadObject(ms);</div><div class="line">    Console.WriteLine(p1.Input + <span class="string">"=&gt;"</span> + p1.Output);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里要注意，这里的Project类和成员要加相关的Attribute：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[DataContract]</div><div class="line">class Project</div><div class="line">&#123;</div><div class="line">    [DataMember]</div><div class="line">    public string Input &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    [DataMember]</div><div class="line">    public string Output &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Unit中-Json-的序列化和反序列化"><a href="#Unit中-Json-的序列化和反序列化" class="headerlink" title="Unit中 Json 的序列化和反序列化"></a>Unit中 Json 的序列化和反序列化</h2><ol>
<li>Unity自带的类JsonUtility,只序列化含有unity序列化器的属性，其他的将被忽略。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">using UnityEngine;</div><div class="line"></div><div class="line">public class PlayerState : MonoBehaviour</div><div class="line">&#123;</div><div class="line">    public string playerName;</div><div class="line">    public int lives;</div><div class="line">    public <span class="built_in">float</span> health;</div><div class="line"></div><div class="line">    public string <span class="function"><span class="title">SaveToString</span></span>()</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">return</span> JsonUtility.ToJson(this);</div><div class="line">    &#125;</div><div class="line">    // Given:</div><div class="line">    // playerName = <span class="string">"Dr Charles"</span></div><div class="line">    // lives = 3</div><div class="line">    // health = 0.8f</div><div class="line">    // SaveToString returns:</div><div class="line">    // &#123;<span class="string">"playerName"</span>:<span class="string">"Dr Charles"</span>,<span class="string">"lives"</span>:3,<span class="string">"health"</span>:0.8&#125;</div><div class="line"></div><div class="line">    public static PlayerInfo CreateFromJSON(string jsonString)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">return</span> JsonUtility.FromJson&lt;PlayerInfo&gt;(jsonString);</div><div class="line">    &#125;</div><div class="line">    // Given JSON input:</div><div class="line">    // &#123;<span class="string">"name"</span>:<span class="string">"Dr Charles"</span>,<span class="string">"lives"</span>:3,<span class="string">"health"</span>:0.8&#125;</div><div class="line">    // this example will <span class="built_in">return</span> a PlayerInfo object with</div><div class="line">    // name == <span class="string">"Dr Charles"</span>, lives == 3, and health == 0.8f.</div><div class="line"></div><div class="line">    public void Load(string savedData)</div><div class="line">     &#123;</div><div class="line">        JsonUtility.FromJsonOverwrite(savedData, this);</div><div class="line">     &#125;</div><div class="line">    // Given JSON input:</div><div class="line">    // &#123;<span class="string">"lives"</span>:3, <span class="string">"health"</span>:0.8&#125;</div><div class="line">    // the Load <span class="keyword">function</span> will change the object on <span class="built_in">which</span> it is called such that</div><div class="line">    // lives == 3 and health == 0.8</div><div class="line">    // the <span class="string">'playerName'</span> field will be left unchanged</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JsonUtility不支持序列化DateTime/Dictionary 和 Hashtable。对于不支持的类型，提供了ISerializationCallbackReceiver接口。此接口提供了两个回调函数来手工处理这些类型，以便进行统一的序列化。目前仅适用于类，不适用于结构体。<br> public void OnBeforeSerialize(): 在序列化之前对数据类型进行处理，表示成可序列化的类型，对这些类型进行序列化。<br> public void OnAfterDeserialize():反序列化之后对获得类型 转化为原始的数据类型。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">using UnityEngine;</div><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">[Serializable]</div><div class="line">public class SerializationCallbackScript&lt;TKey, TValue&gt; : ISerializationCallbackReceiver</div><div class="line">&#123;</div><div class="line">    [SerializeField]</div><div class="line">    public List&lt;TKey&gt; _keys;</div><div class="line">    [SerializeField]</div><div class="line">    public List&lt;TValue&gt; _values ;</div><div class="line"></div><div class="line">    //Unity doesn<span class="string">'t know how to serialize a Dictionary</span></div><div class="line">    public Dictionary&lt;TKey,  TValue&gt;  _myDictionary = new Dictionary&lt;TKey,  TValue&gt;();</div><div class="line"></div><div class="line">   public Dictionary&lt;TKey, TValue&gt; ToDictionary() &#123; return target; &#125;</div><div class="line"></div><div class="line">    public void OnBeforeSerialize()</div><div class="line">    &#123;</div><div class="line">        _keys.Clear();</div><div class="line">        _values.Clear();</div><div class="line"></div><div class="line">        foreach (var kvp in _myDictionary)</div><div class="line">        &#123;</div><div class="line">            _keys.Add(kvp.Key);</div><div class="line">            _values.Add(kvp.Value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void OnAfterDeserialize()</div><div class="line">    &#123;</div><div class="line">        _myDictionary = new Dictionary&lt;TKey,  TValue&gt;();</div><div class="line"></div><div class="line">        for (int i = 0; i != Math.Min(_keys.Count, _values.Count); i++)</div><div class="line">            _myDictionary.Add(_keys[i], _values[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void OnGUI()</div><div class="line">    &#123;</div><div class="line">        foreach (var kvp in _myDictionary)</div><div class="line">            GUILayout.Label("Key: " + kvp.Key + " value: " + kvp.Value);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">///使用</div><div class="line">string str = JsonUtility.ToJson(new Serialization&lt;int, Enemy&gt;(enemies)); // 例 : &#123;"keys":[1000,2000],"values":[&#123;"name":"张三","skills":["攻撃"]&#125;,&#123;"name":"李四","skills":["攻撃","回復"]&#125;]&#125;</div><div class="line">// Json文字列 -&gt; Dictionary&lt;TKey,TValue&gt;</div><div class="line">Dictionary&lt;int, Enemy&gt; enemies = JsonUtility.FromJson&lt;Serialization&lt;int, Enemy&gt;&gt;(str).ToDictionary();</div></pre></td></tr></table></figure>
<p>EditorJsonUtility: 与JSonUtility类似，但可以处理引擎的对象<br>  Static string ToJson(object)<br>  Static void FromJsonOverwrite(string, object)</p>
<ol>
<li>其他的Json库 (LitJson)</li>
</ol>
<p>注:<br>1.使用LitJson解析时，解析类若包含Dictionary结构，则key的类型必须是string，而不能是int类型（如需表示id等），否则无法正确解析！若需要小数，要使用double类型，而不能使用float，可后期在代码里再显式转换为float类型。<br>2.LitJson对ios不兼容。</p>
<p>使用JsonMapper.ToJson()  JsonMapper.ToObject<t>() 来序列化和反序列化。</t></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">using LitJson;</div><div class="line">using System;</div><div class="line"></div><div class="line">public class Person</div><div class="line">&#123;</div><div class="line">    public string   Name     &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    public int      Age      &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    public DateTime Birthday &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class JsonSample</div><div class="line">&#123;</div><div class="line">    public static void <span class="function"><span class="title">Main</span></span>()</div><div class="line">    &#123;</div><div class="line">        PersonToJson();</div><div class="line">        JsonToPerson();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void <span class="function"><span class="title">PersonToJson</span></span>()</div><div class="line">    &#123;</div><div class="line">        Person bill = new Person();</div><div class="line"></div><div class="line">        bill.Name = <span class="string">"William Shakespeare"</span>;</div><div class="line">        bill.Age  = 51;</div><div class="line">        bill.Birthday = new DateTime(1564, 4, 26);</div><div class="line"></div><div class="line">        string json_bill = JsonMapper.ToJson(bill);</div><div class="line"></div><div class="line">        Console.WriteLine(json_bill);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void <span class="function"><span class="title">JsonToPerson</span></span>()</div><div class="line">    &#123;</div><div class="line">        string json = @<span class="string">"</span></div><div class="line">            &#123;</div><div class="line">                "<span class="string">"Name"</span><span class="string">"     : "</span><span class="string">"Thomas More"</span><span class="string">",</span></div><div class="line">                "<span class="string">"Age"</span><span class="string">"      : 57,</span></div><div class="line">                "<span class="string">"Birthday"</span><span class="string">" : "</span><span class="string">"02/07/1478 00:00:00"</span><span class="string">"</span></div><div class="line">            &#125;";</div><div class="line"></div><div class="line">        Person thomas = JsonMapper.ToObject&lt;Person&gt;(json);</div><div class="line"></div><div class="line">        Console.WriteLine(<span class="string">"Thomas' age: &#123;0&#125;"</span>, thomas.Age);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JsonData：生成Json结构, 解析json。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">static void <span class="function"><span class="title">jsonTest</span></span>() &#123;</div><div class="line">            //生成JsonData</div><div class="line">            JsonData jd = new JsonData();</div><div class="line">            jd[<span class="string">"result"</span>] = 1;</div><div class="line">            jd[<span class="string">"user"</span>] = new JsonData();//**新添加一层关系时，需要再次 new** JsonData（）</div><div class="line">            jd[<span class="string">"user"</span>][<span class="string">"name"</span>] = <span class="string">"zhang"</span>;</div><div class="line">            jd[<span class="string">"user"</span>][<span class="string">"password"</span>] = 123456;</div><div class="line"></div><div class="line">            //序列化JsonData</div><div class="line">            string jsonData = JsonMapper.ToJson(jd);</div><div class="line">            Console.WriteLine(jsonData);</div><div class="line"></div><div class="line">            //反序列化JsonData</div><div class="line">            JsonData deJson=JsonMapper.ToObject(jsonData);</div><div class="line">            int result = int.Parse(deJson[<span class="string">"result"</span>].ToJson());</div><div class="line">            string name = deJson[<span class="string">"user"</span>][<span class="string">"name"</span>].ToString();</div><div class="line">            int psw = int.Parse(deJson[<span class="string">"user"</span>][<span class="string">"password"</span>].ToString());</div><div class="line">            Console.WriteLine( <span class="string">"result="</span>+result);</div><div class="line">            Console.WriteLine(<span class="string">"name="</span>+name);</div><div class="line">            Console.WriteLine(<span class="string">"psw="</span>+psw);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>如果反序列化后没有已知的类型，则可用JsonData。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">using LitJson;</div><div class="line">using System;</div><div class="line"></div><div class="line">public class JsonSample</div><div class="line">&#123;</div><div class="line">    public static void <span class="function"><span class="title">Main</span></span>()</div><div class="line">    &#123;</div><div class="line">        string json = @<span class="string">"</span></div><div class="line">          &#123;</div><div class="line">            "<span class="string">"album"</span><span class="string">" : &#123;</span></div><div class="line">              "<span class="string">"name"</span><span class="string">"   : "</span><span class="string">"The Dark Side of the Moon"</span><span class="string">",</span></div><div class="line">              "<span class="string">"artist"</span><span class="string">" : "</span><span class="string">"Pink Floyd"</span><span class="string">",</span></div><div class="line">              "<span class="string">"year"</span><span class="string">"   : 1973,</span></div><div class="line">              "<span class="string">"tracks"</span><span class="string">" : [</span></div><div class="line">                "<span class="string">"Speak To Me"</span><span class="string">",</span></div><div class="line">                "<span class="string">"Breathe"</span><span class="string">",</span></div><div class="line">                "<span class="string">"On The Run"</span><span class="string">"</span></div><div class="line">              ]</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        ";</div><div class="line"></div><div class="line">        LoadAlbumData(json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void LoadAlbumData(string json_text)</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(<span class="string">"Reading data from the following JSON string: &#123;0&#125;"</span>,</div><div class="line">                          json_text);</div><div class="line"></div><div class="line">        JsonData data = JsonMapper.ToObject(json_text);</div><div class="line"></div><div class="line">        // Dictionaries are accessed like a <span class="built_in">hash</span>-table</div><div class="line">        Console.WriteLine(<span class="string">"Album's name: &#123;0&#125;"</span>, data[<span class="string">"album"</span>][<span class="string">"name"</span>]);</div><div class="line"></div><div class="line">        // Scalar elements stored <span class="keyword">in</span> a JsonData instance can be cast to</div><div class="line">        // their natural types</div><div class="line">        string artist = (string) data[<span class="string">"album"</span>][<span class="string">"artist"</span>];</div><div class="line">        int    year   = (int) data[<span class="string">"album"</span>][<span class="string">"year"</span>];</div><div class="line"></div><div class="line">        Console.WriteLine(<span class="string">"Recorded by &#123;0&#125; in &#123;1&#125;"</span>, artist, year);</div><div class="line"></div><div class="line">        // Arrays are accessed like regular lists as well</div><div class="line">        Console.WriteLine(<span class="string">"First track: &#123;0&#125;"</span>, data[<span class="string">"album"</span>][<span class="string">"tracks"</span>][0]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JsonReader 和 JsonWrite:   两种类型实际上是这个库的基础,和JsonMapper类型是建立在他们之上。</p>
<p>JsonReader：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">using LitJson;</div><div class="line">using System;</div><div class="line"></div><div class="line">public class DataReader</div><div class="line">&#123;</div><div class="line">    public static void <span class="function"><span class="title">Main</span></span>()</div><div class="line">    &#123;</div><div class="line">        string sample = @<span class="string">"&#123;</span></div><div class="line">            "<span class="string">"name"</span><span class="string">"  : "</span><span class="string">"Bill"</span><span class="string">",</span></div><div class="line">            "<span class="string">"age"</span><span class="string">"   : 32,</span></div><div class="line">            "<span class="string">"awake"</span><span class="string">" : true,</span></div><div class="line">            "<span class="string">"n"</span><span class="string">"     : 1994.0226,</span></div><div class="line">            "<span class="string">"note"</span><span class="string">"  : [ "</span><span class="string">"life"</span><span class="string">", "</span><span class="string">"is"</span><span class="string">", "</span><span class="string">"but"</span><span class="string">", "</span><span class="string">"a"</span><span class="string">", "</span><span class="string">"dream"</span><span class="string">" ]</span></div><div class="line">          &#125;";</div><div class="line"></div><div class="line">        PrintJson(sample);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void PrintJson(string json)</div><div class="line">    &#123;</div><div class="line">        JsonReader reader = new JsonReader(json);</div><div class="line"></div><div class="line">        Console.WriteLine (<span class="string">"&#123;0,14&#125; &#123;1,10&#125; &#123;2,16&#125;"</span>, <span class="string">"Token"</span>, <span class="string">"Value"</span>, <span class="string">"Type"</span>);</div><div class="line">        Console.WriteLine (new String (<span class="string">'-'</span>, 42));</div><div class="line"></div><div class="line">        // The Read() method returns <span class="literal">false</span> when there<span class="string">'s nothing else to read</span></div><div class="line">        while (reader.Read()) &#123;</div><div class="line">            string type = reader.Value != null ?</div><div class="line">                reader.Value.GetType().ToString() : "";</div><div class="line"></div><div class="line">            Console.WriteLine("&#123;0,14&#125; &#123;1,10&#125; &#123;2,16&#125;",</div><div class="line">                              reader.Token, reader.Value, type);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出如下:</p>
<pre><code>Token      Value             Type
</code></pre><hr>
<p>   ObjectStart<br>  PropertyName       name    System.String<br>        String       Bill    System.String<br>  PropertyName        age    System.String<br>           Int         32     System.Int32<br>  PropertyName      awake    System.String<br>       Boolean       True   System.Boolean<br>  PropertyName          n    System.String<br>        Double  1994.0226    System.Double<br>  PropertyName       note    System.String<br>    ArrayStart<br>        String       life    System.String<br>        String         is    System.String<br>        String        but    System.String<br>        String          a    System.String<br>        String      dream    System.String<br>      ArrayEnd<br>     ObjectEnd    </p>
<p>JsonWrite：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">using LitJson;</div><div class="line">using System;</div><div class="line">using System.Text;</div><div class="line"></div><div class="line">public class DataWriter</div><div class="line">&#123;</div><div class="line">    public static void <span class="function"><span class="title">Main</span></span>()</div><div class="line">    &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        JsonWriter writer = new JsonWriter(sb);</div><div class="line"></div><div class="line">        writer.WriteArrayStart();</div><div class="line">        writer.Write(1);</div><div class="line">        writer.Write(2);</div><div class="line">        writer.Write(3);</div><div class="line"></div><div class="line">        writer.WriteObjectStart();</div><div class="line">        writer.WritePropertyName(<span class="string">"color"</span>);</div><div class="line">        writer.Write(<span class="string">"blue"</span>);</div><div class="line">        writer.WriteObjectEnd();</div><div class="line"></div><div class="line">        writer.WriteArrayEnd();</div><div class="line"></div><div class="line">        Console.WriteLine(sb.ToString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出如下：<br>[1,2,3,{“color”:”blue”}]</p>
<p>一些JsonReader和JsonWriter对象属性。</p>
<p>JsonReader 的配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">using LitJson;</div><div class="line">using System;</div><div class="line"></div><div class="line">public class JsonReaderConfigExample</div><div class="line">&#123;</div><div class="line">    public static void <span class="function"><span class="title">Main</span></span>()</div><div class="line">    &#123;</div><div class="line">        string json;</div><div class="line"></div><div class="line">        json = <span class="string">" /* these are some numbers */ [ 2, 3, 5, 7, 11 ] "</span>;</div><div class="line">        TestReadingArray(json);</div><div class="line"></div><div class="line">        json = <span class="string">" [ \"hello\", 'world' ] "</span>;</div><div class="line">        TestReadingArray(json);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void TestReadingArray(string json_array)</div><div class="line">    &#123;</div><div class="line">        JsonReader defaultReader, customReader;</div><div class="line"></div><div class="line">        defaultReader = new JsonReader(json_array);</div><div class="line">        customReader  = new JsonReader(json_array);</div><div class="line"></div><div class="line">        customReader.AllowComments            = <span class="literal">false</span>; //是否允许json字符串中有注释（注释不在解析范围）</div><div class="line">        customReader.AllowSingleQuotedStrings = <span class="literal">false</span>;//是否允许单引号代替双引号</div><div class="line"></div><div class="line">        ReadArray(defaultReader);</div><div class="line">        ReadArray(customReader);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void ReadArray(JsonReader reader)</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(<span class="string">"Reading an array"</span>);</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            JsonData data = JsonMapper.ToObject(reader);</div><div class="line"></div><div class="line">            foreach (JsonData elem <span class="keyword">in</span> data)</div><div class="line">                Console.Write(<span class="string">"  &#123;0&#125;"</span>, elem);</div><div class="line"></div><div class="line">            Console.WriteLine(<span class="string">"  [end]"</span>);</div><div class="line">        &#125;</div><div class="line">        catch (Exception e) &#123;</div><div class="line">            Console.WriteLine(<span class="string">"  Exception caught: &#123;0&#125;"</span>, e.Message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出:</p>
<p>Reading an array<br>  2  3  5  7  11  [end]<br>Reading an array<br>  Exception caught: Invalid character ‘/‘ in input string<br>Reading an array<br>  hello  world  [end]<br>Reading an array<br>  Exception caught: Invalid character ‘’’ in input string</p>
<p>JsonWriter的配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">using LitJson;</div><div class="line">using System;</div><div class="line"></div><div class="line">public enum AnimalType</div><div class="line">&#123;</div><div class="line">    Dog,</div><div class="line">    Cat,</div><div class="line">    Parrot</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Animal</div><div class="line">&#123;</div><div class="line">    public string     Name &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    public AnimalType Type &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    public int        Age  &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    public string[]   Toys &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class JsonWriterConfigExample</div><div class="line">&#123;</div><div class="line">    public static void <span class="function"><span class="title">Main</span></span>()</div><div class="line">    &#123;</div><div class="line">        var dog = new Animal &#123;</div><div class="line">            Name = <span class="string">"Noam Chompsky"</span>,</div><div class="line">            Type = AnimalType.Dog,</div><div class="line">            Age  = 3,</div><div class="line">            Toys = new string[] &#123; <span class="string">"rubber bone"</span>, <span class="string">"tennis ball"</span> &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        var cat = new Animal &#123;</div><div class="line">            Name = <span class="string">"Colonel Meow"</span>,</div><div class="line">            Type = AnimalType.Cat,</div><div class="line">            Age  = 5,</div><div class="line">            Toys = new string[] &#123; <span class="string">"cardboard box"</span> &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        TestWritingAnimal(dog);</div><div class="line">        TestWritingAnimal(cat, 2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void TestWritingAnimal(Animal pet, int indentLevel = 0)</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(<span class="string">"\nConverting &#123;0&#125;'s data into JSON.."</span>, pet.Name);</div><div class="line">        JsonWriter writer1 = new JsonWriter(Console.Out);</div><div class="line">        JsonWriter writer2 = new JsonWriter(Console.Out);</div><div class="line"></div><div class="line">        writer2.PrettyPrint = <span class="literal">true</span>;  //输出格式</div><div class="line">        <span class="keyword">if</span> (indentLevel != 0)</div><div class="line">            writer2.IndentValue = indentLevel;</div><div class="line"></div><div class="line">        Console.WriteLine(<span class="string">"Default JSON string:"</span>);</div><div class="line">        JsonMapper.ToJson(pet, writer1);</div><div class="line"></div><div class="line">        Console.Write(<span class="string">"\nPretty-printed:"</span>);</div><div class="line">        JsonMapper.ToJson(pet, writer2);</div><div class="line">        Console.WriteLine(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<p>Converting Noam Chompsky’s data into JSON..<br>Default JSON string:<br>{“Name”:”Noam Chompsky”,”Type”:0,”Age”:3,”Toys”:[“rubber bone”,”tennis ball”]}<br>Pretty-printed:<br>{<br>    “Name” : “Noam Chompsky”,<br>    “Type” : 0,<br>    “Age”  : 3,<br>    “Toys” : [<br>        “rubber bone”,<br>        “tennis ball”<br>    ]<br>}</p>
<p>Converting Colonel Meow’s data into JSON..<br>Default JSON string:<br>{“Name”:”Colonel Meow”,”Type”:1,”Age”:5,”Toys”:[“cardboard box”]}<br>Pretty-printed:<br>{<br>  “Name” : “Colonel Meow”,<br>  “Type” : 1,<br>  “Age”  : 5,<br>  “Toys” : [<br>    “cardboard box”<br>  ]<br>}</p>
]]></content>
    
    <summary type="html">
    
      Json
    
    </summary>
    
      <category term="Json" scheme="http://yoursite.com/categories/Json/"/>
    
    
      <category term="Json" scheme="http://yoursite.com/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>游戏中菜单内有可操作的通知系统</title>
    <link href="http://yoursite.com/2017/05/24/%E6%B8%B8%E6%88%8F%E4%B8%AD%E8%8F%9C%E5%8D%95%E5%86%85%E6%9C%89%E5%8F%AF%E6%93%8D%E4%BD%9C%E7%9A%84%E9%80%9A%E7%9F%A5%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2017/05/24/游戏中菜单内有可操作的通知系统/</id>
    <published>2017-05-24T11:54:42.000Z</published>
    <updated>2017-05-26T09:55:55.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><pre><code>如果策划要求游戏中菜单的按钮（某一界面的接口）需要给出打开界面有多少可操作的提示。如下图中红圈所示：
</code></pre><p><img src="/2017/05/24/游戏中菜单内有可操作的通知系统/游戏中菜单内有可操作的通知系统
/1.jpg" alt="图"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>  每个界面有多个提示， 每个提示由 背景、数字(1 - 9)、感叹号(!)组成，在每个界面中添加下面的脚本对此进行处理。</p>
<p>观察者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//抽象基类</div><div class="line">public abstract class Observe&lt;T&gt; : MonoBehaviour</div><div class="line">&#123;</div><div class="line">    public abstract T Key &#123; get; <span class="built_in">set</span>; &#125;</div><div class="line">    public abstract void SetNotifications(subjectData data);</div><div class="line"></div><div class="line">    public abstract void SetOneNotification(int buttonID, int iconValue);</div><div class="line">    public abstract int GetCount();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">public class NotificationObserve : Observe&lt;ObserveKey&gt;</div><div class="line">&#123;</div><div class="line">    [SerializeField]</div><div class="line">    protected UISprite[] iconBackgrounds;</div><div class="line">    [SerializeField]</div><div class="line">    protected UILabel[] iconLabels;</div><div class="line">    [SerializeField]</div><div class="line">    protected UISprite[] iconExclamations;</div><div class="line"></div><div class="line">    public override ObserveKey Key</div><div class="line">    &#123;</div><div class="line">        get</div><div class="line">        &#123;</div><div class="line">            throw new NotImplementedException();</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">set</span></div><div class="line">        &#123;</div><div class="line">            throw new NotImplementedException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void <span class="function"><span class="title">Start</span></span>()</div><div class="line">    &#123;</div><div class="line">        Key = ObserveKey.mainUI;</div><div class="line">        NotificationSubject.Instance.RigesterObserve(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override void SetNotifications(subjectData data)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(var i = 0; i &lt; data.nums.Length; ++i)</div><div class="line">        &#123;</div><div class="line">            SetOneNotification(i, data.nums[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override void SetOneNotification(int buttonID, int iconValue)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (iconValue &lt; 0)	</div><div class="line">        &#123;</div><div class="line">            iconBackgrounds[buttonID].enabled = <span class="literal">false</span>;</div><div class="line">            iconLabels[buttonID].enabled = <span class="literal">false</span>;</div><div class="line">            iconExclamations[buttonID].enabled = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (iconValue == 0 || iconValue &gt; 9)</div><div class="line">        &#123;</div><div class="line">            iconBackgrounds[buttonID].enabled = <span class="literal">true</span>;</div><div class="line">            iconLabels[buttonID].enabled = <span class="literal">false</span>;	</div><div class="line">            iconExclamations[buttonID].enabled = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (iconValue &gt; 0)</div><div class="line">        &#123;</div><div class="line">            iconBackgrounds[buttonID].enabled = <span class="literal">true</span>;</div><div class="line">            iconLabels[buttonID].enabled = <span class="literal">true</span>;</div><div class="line">            iconLabels[buttonID].text = (Math.M<span class="keyword">in</span>(iconValue, 9)).ToString();</div><div class="line">            iconExclamations[buttonID].enabled = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override int <span class="function"><span class="title">GetCount</span></span>()</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">return</span> iconBackgrounds.Length;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">///每个界面对应的关键字</div><div class="line">public enum ObserveKey</div><div class="line">&#123;</div><div class="line">    mainUI,</div><div class="line">    storeUI,</div><div class="line">    none</div><div class="line">&#125;</div><div class="line">///每个界面的通知数据</div><div class="line">public class subjectData</div><div class="line">&#123;</div><div class="line">    public ObserveKey key;</div><div class="line">    public int[] nums;</div><div class="line"></div><div class="line">    public subjectData(ObserveKey key, int[] nums)</div><div class="line">    &#123;</div><div class="line">        this.key = key;</div><div class="line">        this.nums = nums;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public string <span class="function"><span class="title">ToJson</span></span>()</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public bool Parse(string json)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">///抽象基类</div><div class="line">public abstract class Subject&lt;T&gt; : MonoBehaviour</div><div class="line">&#123;</div><div class="line">    protected Dictionary&lt;T, Observe&lt;T&gt;&gt; observes = new Dictionary&lt;T, Observe&lt;T&gt;&gt;();</div><div class="line">    public void RigesterObserve(Observe&lt;T&gt; observe)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">if</span> (!observes.ContainsKey(observe.Key))</div><div class="line">             observes.Add(observe.Key, observe);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">    public void UnRigesterObserve(Observe&lt;T&gt; observe)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">if</span> (observes.ContainsKey(observe.Key))</div><div class="line">             observes.Remove(observe.Key);</div><div class="line">     &#125;</div><div class="line">    public Observe&lt;T&gt; GetObserve(T key)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">if</span> (observes.ContainsKey(key))</div><div class="line">             <span class="built_in">return</span> observes[key];</div><div class="line">         <span class="built_in">return</span> null;</div><div class="line">     &#125;</div><div class="line">     public abstract void Notify(); ///通知所有的界面</div><div class="line"></div><div class="line">     public abstract void NotifyOneKey(T key);///通知key对应的界面</div><div class="line"></div><div class="line">     public abstract void NotifyOneOne(T key, int index);///通知key对应界面的对应编号</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">///通知的管理类</div><div class="line">public class NotificationSubject : Subject&lt;ObserveKey&gt;</div><div class="line">&#123;</div><div class="line">    public subjectData[] datas;</div><div class="line">    public static NotificationSubject Instance;</div><div class="line">    void <span class="function"><span class="title">Awake</span></span>()</div><div class="line">    &#123;</div><div class="line">        datas = new subjectData[(int)ObserveKey.none];</div><div class="line">        <span class="keyword">for</span> (int i = (int)ObserveKey.none; i &gt;= 0; --i)</div><div class="line">        &#123;</div><div class="line">            datas[i].key = (ObserveKey)i;</div><div class="line">            datas[i].nums = new int[base.GetObserve(datas[i].key).GetCount()];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override void <span class="function"><span class="title">Notify</span></span>()</div><div class="line">    &#123;</div><div class="line">         this.CalcDatas();</div><div class="line"></div><div class="line">         <span class="keyword">for</span>(int i = (int)ObserveKey.none; i &gt;= 0; --i)</div><div class="line">         &#123;</div><div class="line">             observes[(ObserveKey)i].SetNotifications(datas[i]);</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override void NotifyOneKey(ObserveKey key)</div><div class="line">    &#123;</div><div class="line">        this.CalcDatas();</div><div class="line"></div><div class="line">        observes[key].SetNotifications(datas[(int)key]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override void NotifyOneOne(ObserveKey key, int index)</div><div class="line">    &#123;</div><div class="line">        this.CalcDatas();</div><div class="line"></div><div class="line">        observes[key].SetOneNotification(index, datas[(int)key].nums[index]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /// &lt;summary&gt;</div><div class="line">    /// 计算subjectData中nums值</div><div class="line">    /// &lt;/summary&gt;</div><div class="line">    public void <span class="function"><span class="title">CalcDatas</span></span>()</div><div class="line">    &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当需要时调用NotificationSubject.Instance.Notify / NotifyOneKey / NotifyOneOne即可。</p>
]]></content>
    
    <summary type="html">
    
      如果策划要求游戏中菜单的按钮（某一界面的接口）需要给出打开界面有多少可操作的提示。
    
    </summary>
    
      <category term="Unity脚本" scheme="http://yoursite.com/categories/Unity%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Hexo文章中添加图片</title>
    <link href="http://yoursite.com/2017/05/23/Hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2017/05/23/Hexo文章中添加图片/</id>
    <published>2017-05-23T07:12:47.000Z</published>
    <updated>2017-05-26T09:55:55.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>首先将站点配置文件_config.yml中 post_asset_folder: 这个选项设置为true。</li>
<li>在Git Bush 中 hexo目录下，下载插件，执行</li>
</ol>
<pre><code class="bash">$ npm install hexo-asset-image --save
</code></pre>
<ol>
<li><p>执行成功后，再运行hexo new “xxxx”生成md博文时， /source/_posts文件夹内除了生成xxxx.md文件外还生成了一个同名的文件夹</p>
</li>
<li><p>若想在xxxx.md中引入图片，则先把图片赋值到xxxx文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片</p>
</li>
</ol>
<p><img src="/2017/05/23/Hexo文章中添加图片/xxxx/图片名.jpg" alt="替代文字"></p>
<ol>
<li>最后检查一下， hexo  g 生成页面后，进入public\2017\05\23\index.html文件中查看相关字段，可以发现，html标签内的语句是<img src="/2017/05/23/Hexo文章中添加图片/2017/05/23/xxxx/图片名.jpg">， 而不是<img src="/2017/05/23/Hexo文章中添加图片/xxxx/图片名.jpg">。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      如何在文章中插入图片
    
    </summary>
    
      <category term="Hexo教程" scheme="http://yoursite.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 问题集</title>
    <link href="http://yoursite.com/2017/05/23/Hexo-%E9%97%AE%E9%A2%98%E9%9B%86/"/>
    <id>http://yoursite.com/2017/05/23/Hexo-问题集/</id>
    <published>2017-05-23T07:12:17.000Z</published>
    <updated>2017-05-26T09:55:55.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网站乱码问题"><a href="#网站乱码问题" class="headerlink" title="网站乱码问题"></a>网站乱码问题</h2><pre><code>在/source/_posts文件夹中的.md文件的编码方式必须是UTF-8。
在编辑器中打开.md文件，将其另存为...，在另存为弹出中选择编码方式为UTF-8。
</code></pre>]]></content>
    
    <summary type="html">
    
      Hexo常见问题
    
    </summary>
    
      <category term="Hexo教程" scheme="http://yoursite.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Image</title>
    <link href="http://yoursite.com/2017/05/23/Image/"/>
    <id>http://yoursite.com/2017/05/23/Image/</id>
    <published>2017-05-23T05:49:36.000Z</published>
    <updated>2017-05-26T09:55:55.576Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo教程</title>
    <link href="http://yoursite.com/2017/05/23/Hexo%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/05/23/Hexo教程/</id>
    <published>2017-05-23T03:58:10.000Z</published>
    <updated>2017-05-26T09:55:55.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>1.安装Node.js</p>
<p>2.安装Git</p>
<ol>
<li>申请GitHub</li>
</ol>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>1.打开Git Bash, 输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo-cli -g</div><div class="line"><span class="variable">$npm</span> install hexo --save</div></pre></td></tr></table></figure>
<p>然后输入以下命令查看Hexo的版本信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> -v</div></pre></td></tr></table></figure>
<p>如果出现类似内容说明安装成功。</p>
<p><img src="/2017/05/23/Hexo教程/1.jpg" alt="结果"></p>
<h2 id="Hexo的初始设置"><a href="#Hexo的初始设置" class="headerlink" title="Hexo的初始设置"></a>Hexo的初始设置</h2><p>1.新建Blog文件夹。如在E盘中新建Blog文件夹</p>
<p>2.使用GitBush进入文件夹中，并初始化博客目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cd</span> e:B<span class="built_in">log</span></div><div class="line"><span class="variable">$hexo</span> init</div></pre></td></tr></table></figure>
<p>然后输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install</div></pre></td></tr></table></figure></p>
<p>之后npm将会自动安装需要的组件，只需等待npm操作即可。</p>
<p>3.与GitHub连接<br>   在GitHub中建立与用户名对应的Repository，名称必须为【your_user_name.github.io】,如jpsxno1.github.io<br>,此为固定写法。<br>   在站点配置文件（即Blog文件夹下的_config.yml）中找到deploy，并添加对应配置：</p>
<pre><code># Deployment
## Docs: http://hexo.io/docs/deployment.html
deploy:
type: git
repo: https://github.com/jpsxno1/jpsxno1.github.io.git
branch: master
</code></pre><p>然后安装插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h2 id="Hexo的简单使用"><a href="#Hexo的简单使用" class="headerlink" title="Hexo的简单使用"></a>Hexo的简单使用</h2><p>1.新建文章</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> new <span class="string">"文章名"</span></div></pre></td></tr></table></figure>
<p>然后就可以在Blog/source/_posts文件夹下找到对应的.md文件。使用编辑器打开：</p>
<hr>
<p>title: FirstUse</p>
<p>date: 2017-05-23 10:20:02</p>
<p>tags:</p>
<hr>
<p>在下面就可以接着写文章的内容，如：</p>
<hr>
<p>title: FirstUse</p>
<p>date: 2017-05-23 10:20:02</p>
<p>tags:</p>
<hr>
<p>这是我第一次使用Hexo，参考了网上的一些教程自己弄了个个人博客。以后我会在这个博客中记录学习、生活中的一些事。</p>
<p>2.生成页面</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> generate</div></pre></td></tr></table></figure>
<p>3.页面预览</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> server</div></pre></td></tr></table></figure>
<p>然后会看到这样一条提示：</p>
<p><img src="/2017/05/23/Hexo教程/2.jpg" alt="图片"></p>
<p>现在打开浏览器就可以访问 <a href="http://localhost:4000/。" target="_blank" rel="external">http://localhost:4000/。</a></p>
<p>4.发布到GitHub</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> deploy</div></pre></td></tr></table></figure>
<p>然后再GitHub上便能看到刚刚部署的Web网站：<a href="https://jpsxno1.github.io/" target="_blank" rel="external">https://jpsxno1.github.io/</a><br>每次部署的步骤，可分为三步：</p>
<p>hexo clean</p>
<p>hexo generate</p>
<p>hexo deploy</p>
]]></content>
    
    <summary type="html">
    
      部署Hexo博客
    
    </summary>
    
      <category term="Hexo教程" scheme="http://yoursite.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>FirstUse</title>
    <link href="http://yoursite.com/2017/05/23/FirstUse/"/>
    <id>http://yoursite.com/2017/05/23/FirstUse/</id>
    <published>2017-05-23T02:20:02.000Z</published>
    <updated>2017-05-23T02:32:17.308Z</updated>
    
    <content type="html"><![CDATA[<p>这是我第一次使用Hexo，参考了网上的一些教程自己弄了个个人博客。以后我会在这个博客中记录学习、生活中的一些事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我第一次使用Hexo，参考了网上的一些教程自己弄了个个人博客。以后我会在这个博客中记录学习、生活中的一些事。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/22/hello-world/"/>
    <id>http://yoursite.com/2017/05/22/hello-world/</id>
    <published>2017-05-22T08:47:16.529Z</published>
    <updated>2017-05-22T08:47:16.532Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
